/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.etlsolutions.examples.database.hibernate.pojo;
// Generated 04-Dec-2015 14:16:58 by Hibernate Tools 4.3.1

import com.etlsolutions.examples.utility.ConstrainableUtilities;
import com.etlsolutions.examples.data.api.Administrator;
import com.etlsolutions.examples.data.api.AdministratorRole;
import com.etlsolutions.examples.data.spi.AdministratorSpi;
import java.io.Serializable;
import java.util.Objects;
import org.hibernate.proxy.HibernateProxy;

/**
 * The AdministratorPojo class is generated automatically then modified
 * manually.
 *
 * @author Zhipeng Chang
 *
 * @since 1.0.0
 *
 * @version 1.0.0 - Generated by NetBeans.
 * @version 1.1.0 - Add the AdministratorPojo set. Use Generic types.
 * @version 1.2.0 - Add equals and hashCode methods. Add serialVersionUID.
 * @version 1.2.1 - Change the field name from "addressId" to "id".
 * @version 1.3.0 - Add the administrationRole field.
 * @version 1.3.1 - Use the integer type for the "id" field.
 */
public class AdministratorPojo implements Serializable, AdministratorSpi<PersonalDetailPojo> {

    private static final long serialVersionUID = 957318556837958172L;

    private int id;
    private PersonalDetailPojo personalDetail;
    private AdministratorRole role;
    private String username;
    private String password;

    /**
     * Construct a default object. All integer fields are zero. All other fields
     * are null.
     */
    public AdministratorPojo() {
    }

    /**
     * Construct a object with all fields apart from ID initialised.
     *
     * @param personalDetail - The person detail of this administrator.
     * @param role - The role of this administrator
     * @param username - The username of this administrator for the application.
     * @param password - The password of this administrator for the application.
     */
    public AdministratorPojo(PersonalDetailPojo personalDetail, AdministratorRole role, String username, String password) {
        this.personalDetail = personalDetail;
        this.role = role;
        this.username = username;
        this.password = password;
    }
    
    /**
     * Construct a object with all fields initialised.
     *
     * @param id - The administrator ID number.
     * @param personalDetail - The person detail of this administrator.
     * @param role - The role of this administrator
     * @param username - The username of this administrator for the application.
     * @param password - The password of this administrator for the application.
     */
    public AdministratorPojo(int id, PersonalDetailPojo personalDetail, AdministratorRole role, String username, String password) {
        this(personalDetail, role, username, password);
        this.id = id;
    }

    @Override
    public int getId() {
        return this.id;
    }

    @Override
    public void setId(int id) {
        this.id = id;
    }

    @Override
    public PersonalDetailPojo getPersonalDetail() {
        return this.personalDetail;
    }

    @Override
    public void setPersonalDetail(PersonalDetailPojo personalDetail) {
        this.personalDetail = personalDetail;
    }

    @Override
    public AdministratorRole getRole() {
        return role;
    }

    @Override
    public void setRole(AdministratorRole role) {
        this.role = role;
    }

    @Override
    public String getUsername() {
        return this.username;
    }

    @Override
    public void setUsername(String username) {
        this.username = username;
    }

    @Override
    public String getPassword() {
        return this.password;
    }

    @Override
    public void setPassword(String password) {
        this.password = password;
    }

    @Override
    public int hashCode() {
        
        if(this instanceof HibernateProxy) {
            return ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation().hashCode();
        }
                
        int hash = 7;
        hash = 97 * hash + this.getId();
        hash = 97 * hash + Objects.hashCode(this.role);
        hash = 97 * hash + Objects.hashCode(this.username);
        hash = 97 * hash + Objects.hashCode(this.password);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        
        if(this == obj) {
            return true;
        }
        
        if (obj == null) {
            return false;
        }
        
        if(this instanceof HibernateProxy) {
            return ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation().equals(obj);
        }

        if(obj instanceof HibernateProxy) {
            return equals(((HibernateProxy)obj).getHibernateLazyInitializer().getImplementation());
        }
        
        if (getClass() != obj.getClass()) {
            return false;
        }

        final AdministratorPojo other = (AdministratorPojo) obj;
        
        if (this.getId() != other.getId()) {
            return false;
        }
        
        if (!Objects.equals(this.personalDetail, other.getPersonalDetail())) {
            return false;
        }
        
        if (this.role != other.role) {
            return false;
        }
        
        if (!Objects.equals(this.username, other.username)) {
            return false;
        }
        
        return Objects.equals(this.password, other.password);
    }


    @Override
    public boolean hasSameConstraint(Administrator administrator) {

        if (this == administrator) {
            return true;
        }

        if (administrator == null) {
            return false;
        }
        
        if(this instanceof HibernateProxy) {
            return administrator.hasSameConstraint((Administrator)((HibernateProxy) this).getHibernateLazyInitializer().getImplementation());
        }

        if(administrator instanceof HibernateProxy) {
            return hasSameConstraint(((Administrator)(((HibernateProxy)administrator).getHibernateLazyInitializer().getImplementation())));
        }       

        return Objects.equals(getUsername(), administrator.getUsername());
    }

    @Override
    public boolean hasSameParameters(Administrator administrator) {

        if (this == administrator) {
            return true;
        }

        if (administrator == null) {
            return false;
        }
        
        if(this instanceof HibernateProxy) {
            return administrator.hasSameParameters((Administrator)((HibernateProxy) this).getHibernateLazyInitializer().getImplementation());
        }

        if(administrator instanceof HibernateProxy) {
            return hasSameParameters(((Administrator)(((HibernateProxy)administrator).getHibernateLazyInitializer().getImplementation())));
        }           
        
        if (this.role != administrator.getRole()) {
            return false;
        }
        
        if (!Objects.equals(this.username, administrator.getUsername())) {
            return false;
        }
        
        if (!Objects.equals(this.password, administrator.getPassword())) {
            return false;
        }        

        return ConstrainableUtilities.hasSameParameters(personalDetail, administrator.getPersonalDetail());
    }

    @Override
    public String toString() {
        return "AdministratorPojo{name=" + (personalDetail == null ? "null" : (personalDetail.getGivenName() + " " + personalDetail.getFamilyName())) + ", username=" + username + '}';
    }
}