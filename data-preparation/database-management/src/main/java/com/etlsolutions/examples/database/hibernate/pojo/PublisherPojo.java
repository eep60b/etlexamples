/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.etlsolutions.examples.database.hibernate.pojo;
// Generated 19-Nov-2015 11:29:31 by Hibernate Tools 4.3.1

import com.etlsolutions.examples.utility.ConstrainableUtilities;
import com.etlsolutions.examples.data.api.Book;
import com.etlsolutions.examples.data.api.Publisher;
import com.etlsolutions.examples.data.spi.PublisherSpi;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import org.hibernate.proxy.HibernateProxy;

/**
 * The PublisherPojo class is generated automatically then modified manually.
 *
 * @author Zhipeng Chang
 *
 * @since 1.0.0
 *
 * @version 1.0.0 - Generated by NetBeans.
 * @version 1.0.1 - Use the generic type.
 * @version 1.1.0 - Use integer for the "id" field;
 * @version 1.1.1 - Add a non-set-constructor.
 * @version 1.1.2 - Change the field name from "id" to "id".
 */
public class PublisherPojo implements Serializable, PublisherSpi<AddressPojo> {

    private static final long serialVersionUID = 698205812791383444L;    
    
    private int id;
    private AddressPojo address;
    private String name;
    private Set<Book> books = new HashSet<>();

    /**
     * Construct an empty default object. All integer fields are zero. all the
     * set fields will be empty. All other fields are null.
     */
    public PublisherPojo() {
    }

    /**
     * Construct an object with the given ID and name.
     * @param id - The publisher ID.
     * @param name - The publisher name.
     */
    public PublisherPojo(int id, String name) {
        this.id = id;
        this.name = name;
    }

    /**
     * Construct an object with all the non-set fields except ID are
     * initialised.
     *
     * @param address - The publisher address.
     * @param name - The publisher name.
     */
    public PublisherPojo(AddressPojo address, String name) {

        this.address = address;
        this.name = name;
    }

    /**
     * Construct an object with all the non-set fields are initialised.
     *
     * @param id - The publisher id.
     * @param address - The publisher address.
     * @param name - The publisher name.
     */
    public PublisherPojo(int id, AddressPojo address, String name) {

        this.id = id;
        this.address = address;
        this.name = name;
    }

    /**
     * Construct an object with all the fields initialised.
     *
     * @param id - The publisher id.
     * @param address - The publisher address.
     * @param name - The publisher name.
     * @param books - The books this publisher published.
     */
    public PublisherPojo(int id, AddressPojo address, String name, Set<Book> books) {
        this(id, address, name);
        this.books = books == null ? null : new HashSet<>(books);
    }

    @Override
    public int getId() {
        return this.id;
    }

    @Override
    public void setId(int id) {
        this.id = id;
    }

    @Override
    public AddressPojo getAddress() {
        return this.address;
    }

    @Override
    public void setAddress(AddressPojo address) {
        this.address = address;
    }

    @Override
    public String getName() {
        return this.name;
    }

    @Override
    public void setName(String name) {
        this.name = name;
    }

    public Set<Book> getBooks() {
        return books == null ? null : new HashSet<>(books);
    }

    public void setBooks(Set<Book> books) {
        this.books = books == null ? null : new HashSet<>(books);
    }

    @Override
    public boolean hasSameConstraint(Publisher publisher) {

        if (this == publisher) {
            return true;
        }

        if (publisher == null) {
            return false;
        }
        
 
        if(this instanceof HibernateProxy) {
            return publisher.hasSameConstraint(((Publisher)((HibernateProxy) this).getHibernateLazyInitializer().getImplementation()));
        }

        if(publisher instanceof HibernateProxy) {
            return hasSameConstraint(((Publisher)(((HibernateProxy)publisher).getHibernateLazyInitializer().getImplementation())));
        }       

        return Objects.equals(getName(), publisher.getName());
    }

    @Override
    public boolean hasSameParameters(Publisher publisher) {

        if (this == publisher) {
            return true;
        }

        if (publisher == null) {
            return false;
        }
        
        if(this instanceof HibernateProxy) {
            return publisher.hasSameParameters(((Publisher)((HibernateProxy) this).getHibernateLazyInitializer().getImplementation()));
        }

        if(publisher instanceof HibernateProxy) {
            return hasSameParameters(((Publisher)(((HibernateProxy)publisher).getHibernateLazyInitializer().getImplementation())));
        }       

        return ConstrainableUtilities.hasSameParameters(address, publisher.getAddress()) && Objects.equals(getName(), publisher.getName());
    }
 
    public boolean addBook(Book book) {
        return books.add(book);
    }    

    public boolean removeBook(Book book) {
        return books.remove(book);
    }    

    @Override
    public int hashCode() {
        
        if(this instanceof HibernateProxy) {
            return ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation().hashCode();
        }
        
        int hash = 7;
        hash = 79 * hash + this.id;
        hash = 79 * hash + Objects.hashCode(this.address);
        hash = 79 * hash + Objects.hashCode(this.name);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {

        if (this == obj) {
            return true;
        }

        if (obj == null) {
            return false;
        }
             
        if(this instanceof HibernateProxy) {
            return ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation().equals(obj);
        }

        if(obj instanceof HibernateProxy) {
            return equals(((HibernateProxy)obj).getHibernateLazyInitializer().getImplementation());
        }
        
        if (getClass() != obj.getClass()) {
            return false;
        }
        
        final PublisherPojo other = (PublisherPojo) obj;
        
        if (this.id != other.id) {
            return false;
        }
        
        if (!Objects.equals(this.address, other.address)) {
            return false;
        }
        
        return Objects.equals(this.name, other.name);
    }



    @Override
    public String toString() {
        return "PublisherPojo{" + "id=" + id + ", address=" + address + ", name=" + name + '}';
    }
}
