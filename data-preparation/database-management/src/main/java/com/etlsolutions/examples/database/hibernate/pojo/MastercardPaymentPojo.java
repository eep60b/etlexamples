package com.etlsolutions.examples.database.hibernate.pojo;
// Generated 19-Nov-2015 11:29:31 by Hibernate Tools 4.3.1

import com.etlsolutions.examples.utility.ConstrainableUtilities;
import com.etlsolutions.examples.data.api.MastercardPayment;
import com.etlsolutions.examples.data.spi.MastercardPaymentSpi;
import com.etlsolutions.examples.utility.CalendarUtilities;
import java.io.Serializable;
import java.util.Date;
import java.util.Objects;
import org.hibernate.proxy.HibernateProxy;

/**
 * The MastercardPaymentPojo class is generated automatically then modified
 * manually.
 *
 * @author Zhipeng Chang
 *
 * @since 1.0.0
 *
 * @version 1.0.0 - Generated by NetBeans.
 * @version 1.0.1 - Change the field name from "paymentId" to "id".
 * @version 1.0.2 - Use the integer type for the field "id".
 */
public class MastercardPaymentPojo implements Serializable, MastercardPaymentSpi<PaymentDetailPojo, PersonAddressLinkPojo> {

    private static final long serialVersionUID = 743163505783872575L;

    private int id;
    private PersonAddressLinkPojo personAddressLink;
    private PaymentDetailPojo paymentDetail;
    private String cardNumber;
    private String securityCode;
    private Date startDate;
    private Date expireDate;

    /**
     * Construct an empty default object. All integer fields are zero. all the
     * set fields will be empty. All other fields are null.
     */
    public MastercardPaymentPojo() {
    }

    /**
     *
     * @param id
     * @param paymentDetail
     * @param cardNumber
     * @param securityCode
     * @param startDate
     * @param expireDate
     */
    public MastercardPaymentPojo(int id, PaymentDetailPojo paymentDetail, String cardNumber, String securityCode, Date startDate, Date expireDate) {
        this.id = id;
        this.paymentDetail = paymentDetail;
        this.cardNumber = cardNumber;
        this.securityCode = securityCode;
        this.startDate = startDate == null ? null : new Date(startDate.getTime());
        this.expireDate = expireDate == null ? null : new Date(expireDate.getTime());
    }

    /**
     * Construct an object with all the fields initialised.
     *
     * @param personAddressLink
     * @param paymentDetail
     * @param cardNumber
     * @param securityCode
     * @param startDate
     * @param expireDate
     */
    public MastercardPaymentPojo(PersonAddressLinkPojo personAddressLink, PaymentDetailPojo paymentDetail, String cardNumber, String securityCode, Date startDate, Date expireDate) {
        this.personAddressLink = personAddressLink;
        this.paymentDetail = paymentDetail;
        this.cardNumber = cardNumber;
        this.securityCode = securityCode;
        this.startDate = startDate == null ? null : new Date(startDate.getTime());
        this.expireDate = expireDate == null ? null : new Date(expireDate.getTime());
    }

    /**
     *
     * @param id
     * @param personAddressLink
     * @param paymentDetail
     * @param cardNumber
     * @param securityCode
     * @param startDate
     * @param expireDate
     */
    public MastercardPaymentPojo(int id, PersonAddressLinkPojo personAddressLink, PaymentDetailPojo paymentDetail, String cardNumber, String securityCode, Date startDate, Date expireDate) {
        this(personAddressLink, paymentDetail, cardNumber, securityCode, startDate, expireDate);
        this.id = id;
    }

    @Override
    public int getId() {
        return this.id;
    }

    @Override
    public void setId(int id) {
        this.id = id;
    }

    @Override
    public PersonAddressLinkPojo getPersonAddressLink() {
        return this.personAddressLink;
    }

    @Override
    public void setPersonAddressLink(PersonAddressLinkPojo personAddressLink) {
        this.personAddressLink = personAddressLink;
    }

    @Override
    public PaymentDetailPojo getPaymentDetail() {
        return this.paymentDetail;
    }

    @Override
    public void setPaymentDetail(PaymentDetailPojo paymentDetail) {
        this.paymentDetail = paymentDetail;
    }

    @Override
    public String getCardNumber() {
        return this.cardNumber;
    }

    @Override
    public void setCardNumber(String cardNumber) {
        this.cardNumber = cardNumber;
    }

    @Override
    public String getSecurityCode() {
        return this.securityCode;
    }

    @Override
    public void setSecurityCode(String securityCode) {
        this.securityCode = securityCode;
    }

    @Override
    public Date getStartDate() {
        return startDate == null ? null : new Date(startDate.getTime());
    }

    @Override
    public void setStartDate(Date startDate) {
        this.startDate = startDate == null ? null : new Date(startDate.getTime());
    }

    @Override
    public Date getExpireDate() {
        return expireDate == null ? null : new Date(expireDate.getTime());
    }

    @Override
    public void setExpireDate(Date expireDate) {
        this.expireDate = expireDate == null ? null : new Date(expireDate.getTime());
    }

    @Override
    public boolean hasSameConstraint(MastercardPayment payment) {

        if (this == payment) {
            return true;
        }

        if (payment == null) {
            return false;
        }

        if (this instanceof HibernateProxy) {
            return payment.hasSameConstraint(((MastercardPayment) ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation()));
        }

        if (payment instanceof HibernateProxy) {
            return hasSameConstraint(((MastercardPayment) (((HibernateProxy) payment).getHibernateLazyInitializer().getImplementation())));
        }

        return ConstrainableUtilities.hasSameConstraint(paymentDetail, payment.getPaymentDetail());
    }

    @Override
    public boolean hasSameParameters(MastercardPayment payment) {

        if (this == payment) {
            return true;
        }

        if(payment == null) {
            return false;
        }

        if (this instanceof HibernateProxy) {
            return payment.hasSameParameters(((MastercardPayment) ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation()));
        }

        if (payment instanceof HibernateProxy) {
            return hasSameParameters(((MastercardPayment) (((HibernateProxy) payment).getHibernateLazyInitializer().getImplementation())));
        }

        if(!ConstrainableUtilities.hasSameParameters(paymentDetail, payment.getPaymentDetail())){
            return false;
        }

        if (!ConstrainableUtilities.hasSameParameters(personAddressLink, payment.getPersonAddressLink())) {
            return false;
        }

        if (!Objects.equals(cardNumber, payment.getCardNumber())) {
            return false;
        }

        if (!Objects.equals(securityCode, payment.getSecurityCode())) {
            return false;
        }

        return CalendarUtilities.areSameDates(startDate, payment.getStartDate()) && CalendarUtilities.areSameDates(expireDate, payment.getExpireDate());
    }

    @Override
    public int hashCode() {
        
        if (this instanceof HibernateProxy) {
            return ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation().hashCode();
        }
        
        int hash = 7;
        hash = 97 * hash + this.getId();
        hash = 97 * hash + Objects.hashCode(this.personAddressLink);
        hash = 97 * hash + Objects.hashCode(this.paymentDetail);
        hash = 97 * hash + Objects.hashCode(this.cardNumber);
        hash = 97 * hash + Objects.hashCode(this.securityCode);
        hash = 97 * hash + Objects.hashCode(this.startDate);
        hash = 97 * hash + Objects.hashCode(this.expireDate);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {

        if (obj == this) {
            return true;
        }

        if (obj == null) {
            return false;
        }

        if (this instanceof HibernateProxy) {
            return ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation().equals(obj);
        }

        if (obj instanceof HibernateProxy) {
            return equals(((HibernateProxy) obj).getHibernateLazyInitializer().getImplementation());
        }

        if (getClass() != obj.getClass()) {
            return false;
        }

        final MastercardPaymentPojo other = (MastercardPaymentPojo) obj;

        if (this.getId() != other.getId()) {
            return false;
        }

        if (!Objects.equals(this.personAddressLink, other.personAddressLink)) {
            return false;
        }

        if (!Objects.equals(this.paymentDetail, other.paymentDetail)) {
            return false;
        }

        if (!Objects.equals(this.cardNumber, other.cardNumber)) {
            return false;
        }

        if (!Objects.equals(this.securityCode, other.securityCode)) {
            return false;
        }

        return CalendarUtilities.areSameDates(startDate, other.getStartDate()) && CalendarUtilities.areSameDates(expireDate, other.getExpireDate());
    }

    @Override
    public String toString() {
        return "MastercardPaymentPojo{id=" + id + ", payment id=" + (paymentDetail == null ? 0 : paymentDetail.getId()) + ", card number=" + cardNumber + '}';
    }
}
