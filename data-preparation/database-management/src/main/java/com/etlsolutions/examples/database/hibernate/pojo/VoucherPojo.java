/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.etlsolutions.examples.database.hibernate.pojo;
// Generated 19-Nov-2015 11:29:31 by Hibernate Tools 4.3.1

import com.etlsolutions.examples.base.configuration.SystemConstants;
import com.etlsolutions.examples.utility.ConstrainableUtilities;
import com.etlsolutions.examples.data.api.Voucher;
import com.etlsolutions.examples.data.spi.VoucherSpi;
import com.etlsolutions.examples.utility.CalendarUtilities;
import com.etlsolutions.examples.utility.NumberUtilities;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import org.hibernate.proxy.HibernateProxy;

/**
 * The VoucherPojo class is generated automatically then modified manually.
 *
 * @author Zhipeng Chang
 *
 * @since 1.0.0
 *
 * @version 1.0.0 - Generated by NetBeans.
 * @version 1.1.0 - Use the integer type for the field "voucherId".
 * @version 1.1.1 - Change the field name from "voucherId" to "id".
 * @version 1.2.0 - Add implementation of VoucherSpi.
 * @version 1.3.0 - Implement the equals and hashCode methods for Hibernate. If
 * a VoucherPojo class implements HibernateProxy in an standard way i.e. its
 * HibernateLazyInitializer can return an VoucherPojo object. The equals and
 * hashCode methods will use that returned VoucherPojo object to compare.
 */
public class VoucherPojo implements Serializable, VoucherSpi<CustomerPojo> {

    private static final long serialVersionUID = 441353840330216045L;

    private int id;
    private CustomerPojo customer;
    private String voucherToken;
    private BigDecimal total;
    private Set<PaymentDetailPojo> paymentDetails = new HashSet<>(0);
    private Date expireDate;

    /**
     * Construct a default object with all the fields are null.
     */
    public VoucherPojo() {
    }

    /**
     * Construct an object with all the compulsory fields.
     *
     * @param id - The voucher ID number.
     * @param voucherToken - The voucher token number.
     * @param total - The total credit of the voucher.
     * @param expireDate - The expire date of the voucher.
     */
    public VoucherPojo(int id, String voucherToken, BigDecimal total, Date expireDate) {
        this.id = id;
        this.voucherToken = voucherToken;
        this.total = total;
        this.expireDate = expireDate == null ? null : new Date(expireDate.getTime());
    }

    /**
     *
     * @param customer
     * @param voucherToken
     * @param total
     * @param expireDate
     */
    public VoucherPojo(CustomerPojo customer, String voucherToken, BigDecimal total, Date expireDate) {
        this.customer = customer;
        this.voucherToken = voucherToken;
        this.total = total;
        this.expireDate = expireDate == null ? null : new Date(expireDate.getTime());
    }

    /**
     * Construct an object with all fields except ID initialised.
     *
     * @param customer
     * @param voucherToken
     * @param total
     * @param expireDate
     * @param paymentDetails
     */
    public VoucherPojo(CustomerPojo customer, String voucherToken, BigDecimal total, Date expireDate, Set<PaymentDetailPojo> paymentDetails) {
        this(customer, voucherToken, total, expireDate);
        this.paymentDetails = paymentDetails == null ? null : new HashSet<>(paymentDetails);
    }

    /**
     * Construct an object with all fields initialised except sets.
     *
     * @param id - The voucher ID number.
     * @param customer - The customer who owns this voucher.
     * @param voucherToken - he voucher token string.
     * @param total - The total amount of money which can be spent in this voucher.
     * @param expireDate - The expire date of this voucher.
     */
    public VoucherPojo(int id, CustomerPojo customer, String voucherToken, BigDecimal total, Date expireDate) {
        this(customer, voucherToken, total, expireDate);
        this.id = id;
    }
    
    /**
     * Construct an object with all fields initialised.
     *
     * @param id - The voucher ID number.
     * @param customer - The customer who owns this voucher.
     * @param voucherToken - he voucher token string.
     * @param total - The total amount of money which can be spent in this voucher.
     * @param expireDate - The expire date of this voucher.
     * @param paymentDetails - All the payments made by this voucher.
     */
    public VoucherPojo(int id, CustomerPojo customer, String voucherToken, BigDecimal total, Date expireDate, Set<PaymentDetailPojo> paymentDetails) {
        this(customer, voucherToken, total, expireDate, paymentDetails);
        this.id = id;
    }

    @Override
    public int getId() {
        return this.id;
    }

    @Override
    public void setId(int id) {
        this.id = id;
    }

    @Override
    public CustomerPojo getCustomer() {
        return this.customer;
    }

    @Override
    public void setCustomer(CustomerPojo customer) {
        this.customer = customer;
    }

    @Override
    public String getVoucherToken() {
        return this.voucherToken;
    }

    @Override
    public void setVoucherToken(String voucherToken) {
        this.voucherToken = voucherToken;
    }

    @Override
    public BigDecimal getTotal() {
        return this.total;
    }

    @Override
    public void setTotal(BigDecimal total) {
        this.total = total;
    }

    @Override
    public void setExpireDate(Date expireDate) {
        this.expireDate = expireDate == null ? null : new Date(expireDate.getTime());
    }

    @Override
    public Date getExpireDate() {
        return expireDate == null ? null : new Date(expireDate.getTime());
    }

    public Set<PaymentDetailPojo> getPaymentDetails() {
        return paymentDetails == null ? null : new HashSet<>(paymentDetails);
    }

    public void setPaymentDetails(Set<PaymentDetailPojo> paymentDetails) {
        this.paymentDetails = paymentDetails == null ? null : new HashSet<>(paymentDetails);
    }

    @Override
    public boolean hasSameConstraint(Voucher voucher) {

        if (this == voucher) {
            return true;
        }

        if (voucher == null) {
            return false;
        }

        if (this instanceof HibernateProxy) {
            return voucher.hasSameConstraint(((Voucher) ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation()));
        }

        if (voucher instanceof HibernateProxy) {
            return hasSameConstraint(((Voucher) (((HibernateProxy) voucher).getHibernateLazyInitializer().getImplementation())));
        }

        return Objects.equals(getVoucherToken(), voucher.getVoucherToken());
    }

    @Override
    public boolean hasSameParameters(Voucher voucher) {

        if (this == voucher) {
            return true;
        }

        if (voucher == null) {
            return false;
        }

        if (this instanceof HibernateProxy) {
            return voucher.hasSameParameters(((Voucher) ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation()));
        }

        if (voucher instanceof HibernateProxy) {
            return hasSameParameters(((Voucher) (((HibernateProxy) voucher).getHibernateLazyInitializer().getImplementation())));
        }

        return Objects.equals(voucherToken, voucher.getVoucherToken())
                && NumberUtilities.equals(total, voucher.getTotal(), 2)
                && CalendarUtilities.areSameDates(expireDate, voucher.getExpireDate())
                && ConstrainableUtilities.hasSameParameters(customer, voucher.getCustomer());
    }

    //Do NOT use expire date in the hash code since it can not be reliable transfered between database and Java code.
    //Do NOT use the total field in the hash code.
    @Override
    public int hashCode() {

        if (this instanceof HibernateProxy) {
            return ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation().hashCode();
        }

        int hash = 7;
        hash = 79 * hash + getId();
        hash = 79 * hash + Objects.hashCode(this.customer);
        hash = 79 * hash + Objects.hashCode(this.voucherToken);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {

        if (this == obj) {
            return true;
        }

        if (obj == null) {
            return false;
        }

        if (this instanceof HibernateProxy) {
            return ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation().equals(obj);
        }

        if (obj instanceof HibernateProxy) {
            return equals(((HibernateProxy) obj).getHibernateLazyInitializer().getImplementation());
        }

        if (getClass() != obj.getClass()) {
            return false;
        }

        final VoucherPojo other = (VoucherPojo) obj;

        if (getId() != other.getId()) {
            return false;
        }

        if (!Objects.equals(this.customer, other.customer)) {
            return false;
        }

        if (!Objects.equals(this.voucherToken, other.voucherToken)) {
            return false;
        }

        if (!NumberUtilities.equals(this.total, other.total, SystemConstants.DEFAULT_SCALE)) {
            return false;
        }

        return CalendarUtilities.areSameDates(expireDate, other.getExpireDate());
    }

    @Override
    public String toString() {
        return "VoucherPojo{voucherToken=" + voucherToken + '}';
    }
}
