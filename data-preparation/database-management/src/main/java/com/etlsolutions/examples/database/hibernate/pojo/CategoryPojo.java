/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.etlsolutions.examples.database.hibernate.pojo;
// Generated 19-Nov-2015 11:29:31 by Hibernate Tools 4.3.1

import com.etlsolutions.examples.data.api.Category;
import com.etlsolutions.examples.data.api.ItemCommonDetail;
import com.etlsolutions.examples.data.spi.CategorySpi;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import org.hibernate.proxy.HibernateProxy;

/**
 * The CategoryPojo class is generated automatically then modified manually.
 *
 * @author Zhipeng Chang
 *
 * @since 1.0.0
 *
 * @version 1.0.0 - Generated by NetBeans.
 * @version 1.0.1 - Change the field name from categoryId to id.
 * @version 1.1.0 - Use the integer type for the id field.
 * @version 1.1.1 - Set the initial capacities for the set fields.
 * @version 1.2.0 - Add implementation of CategorySpi.
 * @version 1.2.1 - Add implementation of equals and hashCode methods.
 * @version 1.2.2 - Add the static field serialVersionUID.
 */
public class CategoryPojo implements Serializable, CategorySpi {

    private static final long serialVersionUID = 453797304405476723L;

    private int id;
    private String name;
    private Set<ItemCommonDetail> itemCommonDetails = new HashSet<>(200);

    /**
     * Construct an empty default object. All integer fields are zero. all the
     * set fields will be empty. All other fields are null.
     */
    public CategoryPojo() {
    }

    /**
     * Construct an object using the given category name.
     *
     * @param name
     */
    public CategoryPojo(String name) {
        this.name = name;
    }

    /**
     * Construct an object using the given ID and name.
     *
     * @param id
     * @param name
     */
    public CategoryPojo(int id, String name) {
        this(name);
        this.id = id;
    }

    /**
     * Construct an object whose all fields apart from the ID is initialised.
     * 
     * @param name - The category name.
     * @param itemCommonDetails - The items in this category.
     */
    public CategoryPojo(String name, Set<ItemCommonDetail> itemCommonDetails) {
        this(name);
        this.itemCommonDetails = itemCommonDetails == null ? null : new HashSet<>(itemCommonDetails);
    }

    /**
     * Construct an object using the given Category object.
     *
     * @param category - The specified Category object.
     * @throws NullPointerException if the Category object is null.
     */
    public CategoryPojo(Category category) {
        this(category.getName());
    }

    /**
     *
     * @param id
     * @param name
     * @param itemCommonDetails
     */
    public CategoryPojo(int id, String name, Set<ItemCommonDetail> itemCommonDetails) {
        this(name, itemCommonDetails);
        this.id = id;
    }

    @Override
    public int getId() {
        return this.id;
    }

    @Override
    public void setId(int id) {
        this.id = id;
    }

    @Override
    public String getName() {
        return this.name;
    }

    @Override
    public void setName(String name) {
        this.name = name;
    }

    public Set<ItemCommonDetail> getItemCommonDetails() {
        return itemCommonDetails == null ? null : new HashSet<>(itemCommonDetails);
    }

    public void setItemCommonDetails(Set<ItemCommonDetail> itemCommonDetails) {
        this.itemCommonDetails = itemCommonDetails == null ? null : new HashSet<>(itemCommonDetails);
    }

    @Override
    public boolean hasSameConstraint(Category category) {

        if (this == category) {
            return true;
        }

        if (category == null) {
            return false;
        }

        if (this instanceof HibernateProxy) {
            return category.hasSameConstraint(((Category) ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation()));
        }

        if (category instanceof HibernateProxy) {
            return hasSameConstraint(((Category) (((HibernateProxy) category).getHibernateLazyInitializer().getImplementation())));
        }

        return Objects.equals(this.name, category.getName());
    }

    @Override
    public boolean hasSameParameters(Category category) {

        return hasSameConstraint(category);
    }

    @Override
    public int hashCode() {

        if (this instanceof HibernateProxy) {
            return ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation().hashCode();
        }

        int hash = 3;
        hash = 53 * hash + this.getId();
        hash = 53 * hash + Objects.hashCode(this.name);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {

        if (this == obj) {
            return true;
        }

        if (obj == null) {
            return false;
        }

        if (this instanceof HibernateProxy) {
            return ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation().equals(obj);
        }

        if (obj instanceof HibernateProxy) {
            return equals(((HibernateProxy) obj).getHibernateLazyInitializer().getImplementation());
        }

        if (getClass() != obj.getClass()) {
            return false;
        }

        final CategoryPojo other = (CategoryPojo) obj;

        if (this.getId() != other.getId()) {
            return false;
        }

        return Objects.equals(this.name, other.name);
    }

    @Override
    public String toString() {
        return "CategoryPojo{" + "id=" + id + ", name=" + name + '}';
    }
}
