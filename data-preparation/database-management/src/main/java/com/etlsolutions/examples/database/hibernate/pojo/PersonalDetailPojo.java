/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.etlsolutions.examples.database.hibernate.pojo;
// Generated 19-Nov-2015 11:29:31 by Hibernate Tools 4.3.1

import com.etlsolutions.examples.data.api.Email;
import com.etlsolutions.examples.data.api.PersonalDetail;
import com.etlsolutions.examples.data.api.Telephone;
import com.etlsolutions.examples.data.spi.PersonalDetailSpi;
import com.etlsolutions.examples.utility.CalendarUtilities;
import java.io.Serializable;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import org.hibernate.proxy.HibernateProxy;

/**
 * The PersonalDetailPojo class is generated automatically then modified
 * manually.
 *
 * @author Zhipeng Chang
 *
 * @since 1.0.0
 *
 * @version 1.0.0 - Generated by NetBeans.
 * @version 1.0.1 - Use generic types.
 * @version 1.1.0 - Add administrators and reviewers fields.
 * @version 1.2.0 - Add equals and hashCode methods.
 * @version 1.2.1 - Add the static field serialVersionUID.
 * @version 1.2.2 - Add an non-set constructor and non-pojo-class constructor.
 * @version 1.2.3 - Change the the field name from "personalDetailId" to "id".
 * @version 1.3.0 - Use the integer type for the field "id".
 * @version 1.4.0 - Add the implementation of PersonalDetailSpi.
 */
public class PersonalDetailPojo implements Serializable, PersonalDetailSpi {

    private static final long serialVersionUID = 786175252550684623L;

    private int id;
    private String title;
    private String givenName;
    private String familyName;
    private Date dateOfBirth;
    private byte[] profile;
    private Set<AuthorPojo> authors = new HashSet<>(0);
    private Set<AdministratorPojo> administrators = new HashSet<>(0);
    private Set<ReviewerPojo> reviewers = new HashSet<>(0);
    private Set<PersonAddressLinkPojo> personAddressLinks = new HashSet<>(0);
    private Set<Email> emails = new HashSet<>(0);
    private Set<Telephone> telephones = new HashSet<>(0);

    /**
     * Construct a default object without any argument.
     */
    public PersonalDetailPojo() {
    }

    /**
     * Construct an object with all the non-set fields are initialised except
     * the ID.
     *
     * @param title - The title of the person.
     * @param givenName - The given name of the person.
     * @param familyName - The family name of the person.
     * @param dateOfBirth - The date of birth of the person.
     * @param profile - The profile object of the person.
     */
    public PersonalDetailPojo(String title, String givenName, String familyName, Date dateOfBirth, byte[] profile) {
        this.title = title;
        this.givenName = givenName;
        this.familyName = familyName;
        this.dateOfBirth = new Date(dateOfBirth.getTime());
        this.profile = profile;
    }

    /**
     * Construct an object with all the fields except ID are initialised.
     *
     * @param title
     * @param personGivenName
     * @param personFamilyName
     * @param dateOfBirth
     * @param profile
     * @param emails
     * @param telephones
     */
    public PersonalDetailPojo(String title, String personGivenName, String personFamilyName, Date dateOfBirth, byte[] profile,
            Set<Email> emails, Set<Telephone> telephones) {
        this(title, personGivenName, personFamilyName, dateOfBirth, profile);
        this.emails = new HashSet<>(emails);
        this.telephones = new HashSet<>(telephones);
    }

    /**
     *
     * @param personalDetail
     */
    public PersonalDetailPojo(PersonalDetail personalDetail) {
        this(personalDetail.getTitle(), personalDetail.getGivenName(), personalDetail.getFamilyName(),
                personalDetail.getDateOfBirth(), personalDetail.getProfile());
    }
    
    /**
     * Construct an object with all the non-set fields are initialised.
     *
     * @param id
     * @param title
     * @param givenName
     * @param familyName
     * @param dateOfBirth
     * @param profile
     */
    public PersonalDetailPojo(int id, String title, String givenName, String familyName, Date dateOfBirth, byte[] profile) {

        this(title, givenName, familyName, dateOfBirth, profile);
        this.id = id;
    }

    /**
     * Construct an object with all fields are initialised.
     *
     * @param id
     * @param title
     * @param personGivenName
     * @param personFamilyName
     * @param dateOfBirth
     * @param profile
     * @param authors
     * @param administrators
     * @param reviewers
     * @param personAddressLinks
     * @param emails
     * @param telephones
     */
    public PersonalDetailPojo(int id, String title, String personGivenName, String personFamilyName, Date dateOfBirth, byte[] profile,
            Set<AuthorPojo> authors, Set<AdministratorPojo> administrators, Set<ReviewerPojo> reviewers, Set<PersonAddressLinkPojo> personAddressLinks, Set<Email> emails, Set<Telephone> telephones) {
        this(id, title, personGivenName, personFamilyName, dateOfBirth, profile);
        this.authors = authors == null ? null : new HashSet<>(authors);
        this.administrators = administrators == null ? null : new HashSet<>(administrators);
        this.reviewers = reviewers == null ? null : new HashSet<>(reviewers);
        this.personAddressLinks = personAddressLinks == null ? null : new HashSet<>(personAddressLinks);
        this.emails = emails == null ? null : new HashSet<>(emails);
        this.telephones = telephones == null ? null : new HashSet<>(telephones);
    }  
    
    @Override
    public int getId() {
        return id;
    }

    @Override
    public void setId(int id) {
        this.id = id;
    }

    @Override
    public String getTitle() {
        return title;
    }

    @Override
    public void setTitle(String title) {
        this.title = title;
    }

    @Override
    public String getGivenName() {
        return givenName;
    }

    @Override
    public void setGivenName(String givenName) {
        this.givenName = givenName;
    }

    @Override
    public String getFamilyName() {
        return familyName;
    }

    @Override
    public void setFamilyName(String familyName) {
        this.familyName = familyName;
    }

    @Override
    public Date getDateOfBirth() {
        return dateOfBirth == null ? null : new Date(dateOfBirth.getTime());
    }

    @Override
    public void setDateOfBirth(Date dateOfBirth) {
        this.dateOfBirth = new Date(dateOfBirth.getTime());
    }

    @Override
    public byte[] getProfile() {
        return profile == null ? null : Arrays.copyOf(profile, profile.length);
    }

    @Override
    public void setProfile(byte[] profile) {
        this.profile = Arrays.copyOf(profile, profile.length);
    }

    public Set<AuthorPojo> getAuthors() {
        return authors == null ? null : new HashSet<>(authors);
    }

    public void setAuthors(Set<AuthorPojo> authors) {
        this.authors = authors == null ? null : new HashSet<>(authors);
    }

    public Set<AdministratorPojo> getAdministrators() {
        return administrators == null ? null : new HashSet<>(administrators);
    }

    public void setAdministrators(Set<AdministratorPojo> administrators) {
        this.administrators = administrators == null ? null : new HashSet<>(administrators);
    }

    public Set<ReviewerPojo> getReviewers() {
        return reviewers == null ? null : new HashSet<>(reviewers);
    }

    public void setReviewers(Set<ReviewerPojo> reviewers) {
        this.reviewers = reviewers == null ? null : new HashSet<>(reviewers);
    }

    public Set<PersonAddressLinkPojo> getPersonAddressLinks() {
        return personAddressLinks == null ? null : new HashSet<>(personAddressLinks);
    }

    public void setPersonAddressLinks(Set<PersonAddressLinkPojo> personAddressLinks) {
        this.personAddressLinks = personAddressLinks == null ? null : new HashSet<>(personAddressLinks);
    }

    public Set<Email> getEmails() {
        return emails == null ? null : new HashSet<>(emails);
    }

    public void setEmails(Set<Email> emails) {
        this.emails = emails == null ? null : new HashSet<>(emails);
    }

    public Set<Telephone> getTelephones() {
        return  telephones == null ? null : new HashSet<>(telephones);
    }

    public void setTelephones(Set<Telephone> telephones) {
        this.telephones = telephones == null ? null : new HashSet<>(telephones);
    }

    @Override
    public int hashCode() {
        
        if(this instanceof HibernateProxy) {
            return ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation().hashCode();
        }
                
        int hash = 5;
        hash = 13 * hash + this.id;
        hash = 13 * hash + Objects.hashCode(this.title);
        hash = 13 * hash + Objects.hashCode(this.givenName);
        hash = 13 * hash + Objects.hashCode(this.familyName);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {

        if (this == obj) {
            return true;
        }

        if (obj == null) {
            return false;
        }
        
        if(this instanceof HibernateProxy) {
            return ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation().equals(obj);
        }

        if(obj instanceof HibernateProxy) {
            return equals(((HibernateProxy)obj).getHibernateLazyInitializer().getImplementation());
        }
        
        if (getClass() != obj.getClass()) {
            return false;
        }
        
        final PersonalDetailPojo other = (PersonalDetailPojo) obj;
        if (this.getId() != other.getId()) {
            return false;
        }

        if (!Objects.equals(this.title, other.getTitle())) {
            return false;
        }

        if (!Objects.equals(this.givenName, other.getGivenName())) {
            return false;
        }

        if (!Objects.equals(this.familyName, other.getFamilyName())) {
            return false;
        }

        if (!CalendarUtilities.areSameDates(this.dateOfBirth, other.getDateOfBirth())) {
            return false;
        }

        return Arrays.equals(this.profile, other.getProfile());
    }

    @Override
    public boolean hasSameConstraint(PersonalDetail personalDetail) {
        
        if(this == personalDetail) {
            return true;
        }
        
        if(personalDetail == null) {
            return false;
        }

        if(this instanceof HibernateProxy) {
            return personalDetail.hasSameConstraint(((PersonalDetail)((HibernateProxy) this).getHibernateLazyInitializer().getImplementation()));
        }

        if(personalDetail instanceof HibernateProxy) {
            return hasSameConstraint(((PersonalDetail)(((HibernateProxy)personalDetail).getHibernateLazyInitializer().getImplementation())));
        }        
        
        return Arrays.equals(getProfile(), personalDetail.getProfile());
    }

    @Override
    public boolean hasSameParameters(PersonalDetail personalDetail) {

        if (this == personalDetail) {
            return true;
        }

        if (personalDetail == null) {
            return false;
        }

        if(this instanceof HibernateProxy) {
            return personalDetail.hasSameParameters(((PersonalDetail)((HibernateProxy) this).getHibernateLazyInitializer().getImplementation()));
        }

        if(personalDetail instanceof HibernateProxy) {
            return hasSameParameters(((PersonalDetail)(((HibernateProxy)personalDetail).getHibernateLazyInitializer().getImplementation())));
        }        
                
        if (!Objects.equals(this.title, personalDetail.getTitle())) {
            return false;
        }

        if (!Objects.equals(this.givenName, personalDetail.getGivenName())) {
            return false;
        }

        if (!Objects.equals(this.familyName, personalDetail.getFamilyName())) {
            return false;
        }

        if (!CalendarUtilities.areSameDates(this.dateOfBirth, personalDetail.getDateOfBirth())) {
            return false;
        }

        return Arrays.equals(this.profile, personalDetail.getProfile());
    }

    @Override
    public String toString() {
        return "PersonalDetailPojo{" + "id=" + getId() + ", title=" + getTitle() + ", given name=" + getGivenName() + ", family name=" + getFamilyName() + '}';
    }
}
