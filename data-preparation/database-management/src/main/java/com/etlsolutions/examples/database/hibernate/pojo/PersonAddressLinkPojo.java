/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.etlsolutions.examples.database.hibernate.pojo;
// Generated 19-Nov-2015 11:29:31 by Hibernate Tools 4.3.1

import com.etlsolutions.examples.utility.ConstrainableUtilities;
import com.etlsolutions.examples.data.api.PersonAddressLink;
import com.etlsolutions.examples.data.api.AddressType;
import com.etlsolutions.examples.data.spi.PersonAddressLinkSpi;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import org.hibernate.proxy.HibernateProxy;

/**
 * PersonAddressLinkPojo class is generated automatically then modified
 * manually.
 *
 * @author Zhipeng Chang
 *
 * @since 1.0.0
 *
 * @version 1.0.0 - Generated by NetBeans.
 * @version 1.0.1 - Use the generic sets.
 * @version 1.0.2 - Add a non-set-object constructor.
 * @version 1.0.3 - Change the field name from "linkId" to "id".
 * @version 1.1.0 - Use the integer type for the field "id".
 * @version 1.2.0 - Add the customers set.
 * @version 1.2.1 - Override the equals and hashCode methods.
 * @version 1.3.0 - Add the implementation of PersonAddressLinkSpi.
 */
public class PersonAddressLinkPojo implements Serializable, PersonAddressLinkSpi<AddressPojo, PersonalDetailPojo> {

    private static final long serialVersionUID = 862030371948879663L;    
    
    private int id;
    private AddressPojo address;
    private PersonalDetailPojo personalDetail;
    private AddressType addressType;
    private Set<DebitcardPaymentPojo> debitcardPayments = new HashSet<>(1);
    private Set<VisacardPaymentPojo> visacardPayments = new HashSet<>(1);
    private Set<MastercardPaymentPojo> mastercardPayments = new HashSet<>(1);
    private Set<AmexcardPaymentPojo> amexcardPayments = new HashSet<>(1);
    private Set<CustomerPojo> customers = new HashSet<>(1);

    /**
     * Construct an empty default object.
     */
    public PersonAddressLinkPojo() {
    }

    /**
     * Construct a object with the specified ID.
     *
     * @param id - The given ID.
     */
    public PersonAddressLinkPojo(int id) {
        this.id = id;
    }

    /**
     * Construct an object with the given address and personal information.
     * @param address - The full address.
     * @param personalDetail - The personal details.
     * @param addressType - The address type.
     */
    public PersonAddressLinkPojo(AddressPojo address, PersonalDetailPojo personalDetail, AddressType addressType) {
        this.address = address;
        this.personalDetail = personalDetail;
        this.addressType = addressType;
    }

    /**
     * Construct an object with all fields initialised apart from sets.
     * @param id
     * @param address
     * @param personalDetail
     * @param addressType
     */
    public PersonAddressLinkPojo(int id, AddressPojo address, PersonalDetailPojo personalDetail, AddressType addressType) {
        this(address, personalDetail, addressType);
        this.id = id;
    }

    /**
     * Construct an object with all fields initialised.
     * @param linkId
     * @param address
     * @param personalDetail
     * @param addressType
     * @param debitcardPayments
     * @param visacardPayments
     * @param mastercardPayments
     * @param amexcardPayments
     * @param customers
     */
    public PersonAddressLinkPojo(int linkId, AddressPojo address, PersonalDetailPojo personalDetail, AddressType addressType, Set<DebitcardPaymentPojo> debitcardPayments,
            Set<VisacardPaymentPojo> visacardPayments, Set<MastercardPaymentPojo> mastercardPayments, Set<AmexcardPaymentPojo> amexcardPayments, Set<CustomerPojo> customers) {
        this.id = linkId;
        this.address = address;
        this.personalDetail = personalDetail;
        this.addressType = addressType;
        this.debitcardPayments = debitcardPayments == null ? null : new HashSet<>(debitcardPayments);
        this.visacardPayments = visacardPayments == null ? null : new HashSet<>(visacardPayments);
        this.mastercardPayments = mastercardPayments == null ? null : new HashSet<>(mastercardPayments);
        this.amexcardPayments = amexcardPayments == null ? null : new HashSet<>(amexcardPayments);
        this.customers = customers == null ? null : new HashSet<>(customers);
    }

    @Override
    public int getId() {
        return this.id;
    }

    @Override
    public void setId(int id) {
        this.id = id;
    }

    @Override
    public AddressPojo getAddress() {
        return this.address;
    }

    @Override
    public void setAddress(AddressPojo address) {
        this.address = address;
    }

    @Override
    public PersonalDetailPojo getPersonalDetail() {
        return this.personalDetail;
    }

    @Override
    public void setPersonalDetail(PersonalDetailPojo personalDetail) {
        this.personalDetail = personalDetail;
    }

    @Override
    public AddressType getAddressType() {
        return addressType;
    }

    @Override
    public void setAddressType(AddressType addressType) {
        this.addressType = addressType;
    }

    public Set<DebitcardPaymentPojo> getDebitcardPayments() {
        return debitcardPayments == null ? null : new HashSet<>(debitcardPayments);
    }

    public void setDebitcardPayments(Set<DebitcardPaymentPojo> debitcardPayments) {
        this.debitcardPayments = debitcardPayments == null ? null : new HashSet<>(debitcardPayments);
    }

    public Set<VisacardPaymentPojo> getVisacardPayments() {
        return visacardPayments == null ? null : new HashSet<>(visacardPayments);
    }

    public void setVisacardPayments(Set<VisacardPaymentPojo> visacardPayments) {
        this.visacardPayments = visacardPayments == null ? null : new HashSet<>(visacardPayments);
    }

    public Set<MastercardPaymentPojo> getMastercardPayments() {
        return mastercardPayments == null ? null : new HashSet<>(mastercardPayments);
    }

    public void setMastercardPayments(Set<MastercardPaymentPojo> mastercardPayments) {
        this.mastercardPayments = mastercardPayments == null ? null : new HashSet<>(mastercardPayments);
    }

    public Set<AmexcardPaymentPojo> getAmexcardPayments() {
        return amexcardPayments == null ? null : new HashSet<>(amexcardPayments);
    }

    public void setAmexcardPayments(Set<AmexcardPaymentPojo> amexcardPayments) {
        this.amexcardPayments = amexcardPayments == null ? null : new HashSet<>(amexcardPayments);
    }

    public Set<CustomerPojo> getCustomers() {
        return customers == null ? null : new HashSet<>(customers);
    }

    public void setCustomers(Set<CustomerPojo> customers) {
        this.customers = customers == null ? null : new HashSet<>(customers);
    }

    @Override
    public int hashCode() {
        
        if (this instanceof HibernateProxy) {
            return ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation().hashCode();
        }
        
        int hash = 3;
        hash = 29 * hash + this.getId();
        hash = 29 * hash + Objects.hashCode(this.address);
        hash = 29 * hash + Objects.hashCode(this.personalDetail);
        hash = 29 * hash + Objects.hashCode(this.addressType);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {

        if (this == obj) {
            return true;
        }
        
        if (obj == null) {
            return false;
        }
        
        if(this instanceof HibernateProxy) {
            return ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation().equals(obj);
        }

        if(obj instanceof HibernateProxy) {
            return equals(((HibernateProxy)obj).getHibernateLazyInitializer().getImplementation());
        }
        
        if (getClass() != obj.getClass()) {
            return false;
        }

        
        final PersonAddressLinkPojo other = (PersonAddressLinkPojo) obj;
        
        if (this.getId() != other.getId()) {
            return false;
        }
        
        if (!Objects.equals(this.address, other.getAddress())) {
            return false;
        }
        
        if (!Objects.equals(this.personalDetail, other.getPersonalDetail())) {
            return false;
        }
        
        return this.addressType == other.addressType;
    }

    @Override
    public boolean hasSameConstraint(PersonAddressLink personAddressLink) {
        
        if(this == personAddressLink) {
            return true;
        }
        
        if(personAddressLink == null) {
            return false;
        }
        
        if (this instanceof HibernateProxy) {
            return personAddressLink.hasSameConstraint(((PersonAddressLink) ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation()));
        }

        if (personAddressLink instanceof HibernateProxy) {
            return hasSameConstraint(((PersonAddressLink) (((HibernateProxy) personAddressLink).getHibernateLazyInitializer().getImplementation())));
        }      
        
        if(addressType != personAddressLink.getAddressType()) {
            return false;
        }
        
        return ConstrainableUtilities.hasSameConstraint(address, personAddressLink.getAddress()) && ConstrainableUtilities.hasSameConstraint(personalDetail, personAddressLink.getPersonalDetail());
    }

    @Override
    public boolean hasSameParameters(PersonAddressLink personAddressLink) {
        
        if(this == personAddressLink) {
            return true;
        }
        
        if(personAddressLink == null) {
            return false;
        }
        
        if (this instanceof HibernateProxy) {
            return personAddressLink.hasSameParameters(((PersonAddressLink) ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation()));
        }

        if (personAddressLink instanceof HibernateProxy) {
            return hasSameParameters(((PersonAddressLink) (((HibernateProxy) personAddressLink).getHibernateLazyInitializer().getImplementation())));
        }           
        if(addressType != personAddressLink.getAddressType()) {
            return false;
        }

        return ConstrainableUtilities.hasSameParameters(address, personAddressLink.getAddress()) && ConstrainableUtilities.hasSameParameters(personalDetail, personAddressLink.getPersonalDetail());
    }

    @Override
    public String toString() {
        return "PersonAddressLinkPojo{address=" + address + ", personalDetail=" + personalDetail + ", addressType=" + addressType + '}';
    }
}
