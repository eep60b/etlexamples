/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.etlsolutions.examples.database.hibernate.pojo;
// Generated 19-Nov-2015 11:29:31 by Hibernate Tools 4.3.1

import com.etlsolutions.examples.utility.ConstrainableUtilities;
import com.etlsolutions.examples.data.api.Customer;
import com.etlsolutions.examples.data.api.Invoice;
import com.etlsolutions.examples.data.api.ShoppingCartItem;
import com.etlsolutions.examples.data.api.Voucher;
import com.etlsolutions.examples.data.api.Wishlist;
import com.etlsolutions.examples.data.spi.CustomerSpi;
import java.io.Serializable;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import org.hibernate.proxy.HibernateProxy;

/**
 * The CustomerPojo class is generated automatically then modified manually.
 *
 * @author Zhipeng Chang
 *
 * @since 1.0.0
 *
 * @version 1.0.0 - Generated by NetBeans.
 * @version 1.0.1 - Use generic types.
 * @version 1.0.2 - Add the static field serialVersionUID.
 * @version 1.1.0 - Add equals and hashCode methods.
 * @version 1.1.1 - Add a non-set-argument constructor.
 * @version 1.1.2 - Change the field name from id to id.
 * @version 1.1.3 - Use integer type for the id filed.
 * @version 1.1.4 - Set the initial capacities for the set fields.
 * @version 1.1.5 - Override the toString method.
 */
public class CustomerPojo implements Serializable, CustomerSpi<PersonAddressLinkPojo> {

    private static final long serialVersionUID = 254626029793696859L;

    private int id;
    private PersonAddressLinkPojo personAddressLink;
    private String username;
    private String password;
    private byte[] image;
    private Set<Voucher> vouchers = new HashSet<>(2);
    private Set<Invoice> invoices = new HashSet<>(30);
    private Set<Wishlist> wishlists = new HashSet<>(10);
    private Set<ShoppingCartItem> shoppingCart = new HashSet<>(5);

    /**
     * Construct an empty default object. All integer fields are zero. all the
     * set fields will be empty. All other fields are null.
     */
    public CustomerPojo() {
    }

    /**
     * Construct an object with the minimum initialisation. This object can
     * guarantee the database table to be populated without constraint
     * violation.
     *
     * @param id - The customer ID.
     * @param personAddressLink - the personal and address information.
     * @param username - The customer username.
     * @param password - The customer password.
     */
    public CustomerPojo(int id, PersonAddressLinkPojo personAddressLink, String username, String password) {
        this.id = id;
        this.personAddressLink = personAddressLink;
        this.username = username;
        this.password = password;
    }

    /**
     * Construct an object will all non-set arguments except ID. All the set are
     * kept empty. This is the minimum information to populate all the table
     * columns.
     *
     * @param personAddressLink - The personal details of this customer.
     * @param username - The customer username.
     * @param password - The customer password.
     * @param image - The image of this customer.
     */
    public CustomerPojo(PersonAddressLinkPojo personAddressLink, String username, String password, byte[] image) {
        this.personAddressLink = personAddressLink;
        this.username = username;
        this.password = password;
        this.image = image == null ? null : Arrays.copyOf(image, image.length);
    }

    /**
     * Construct an object will all non-set arguments. All the set are kept
     * empty. This is the minimum information to populate all the table columns.
     *
     * @param id - The customer ID.
     * @param personAddressLink - The personal details of this customer.
     * @param username - The customer username.
     * @param password - The customer password.
     * @param image - The image of this customer.
     */
    public CustomerPojo(int id, PersonAddressLinkPojo personAddressLink, String username, String password, byte[] image) {
        this(personAddressLink, username, password, image);
        this.id = id;
    }

    /**
     * Construct an object with all fields are initialised.
     *
     * @param id - The customer ID.
     * @param personAddressLink - The personal details of this customer.
     * @param username - The customer username.
     * @param password - The customer password.
     * @param image - The image of this customer.
     * @param vouchers - The vouchers which this customer has.
     * @param invoices - The invoices of this customer.
     * @param wishlists - the wishlists of this customer.
     * @param shoppingCart - The shopping cart of this customer.
     */
    public CustomerPojo(int id, PersonAddressLinkPojo personAddressLink, String username, String password, byte[] image,
            Set<Voucher> vouchers, Set<Invoice> invoices, Set<Wishlist> wishlists, Set<ShoppingCartItem> shoppingCart) {

        this(id, personAddressLink, username, password, image);
        this.vouchers = vouchers == null ? null : new HashSet<>(vouchers);
        this.invoices = invoices == null ? null : new HashSet<>(invoices);
        this.wishlists = wishlists == null ? null : new HashSet<>(wishlists);
        this.shoppingCart = shoppingCart == null ? null : new HashSet<>(shoppingCart);
    }

    @Override
    public int getId() {
        return this.id;
    }

    @Override
    public void setId(int id) {
        this.id = id;
    }

    @Override
    public PersonAddressLinkPojo getPersonAddressLink() {
        return this.personAddressLink;
    }

    @Override
    public void setPersonAddressLink(PersonAddressLinkPojo personAddressLink) {
        this.personAddressLink = personAddressLink;
    }

    @Override
    public String getUsername() {
        return this.username;
    }

    @Override
    public void setUsername(String username) {
        this.username = username;
    }

    @Override
    public String getPassword() {
        return this.password;
    }

    @Override
    public void setPassword(String password) {
        this.password = password;
    }

    @Override
    public byte[] getImage() {
        return image == null ? null : Arrays.copyOf(image, image.length);
    }

    @Override
    public void setImage(byte[] image) {
        this.image = image == null ? null : Arrays.copyOf(image, image.length);
    }

    public Set<Voucher> getVouchers() {
        return vouchers == null ? null : new HashSet<>(vouchers);
    }

    public void setVouchers(Set<Voucher> vouchers) {
        this.vouchers = vouchers == null ? null : new HashSet<>(vouchers);
    }

    public Set<Invoice> getInvoices() {
        return invoices == null ? null : new HashSet<>(invoices);
    }

    public void setInvoices(Set<Invoice> invoices) {
        this.invoices = invoices == null ? null : new HashSet<>(invoices);
    }

    public Set<Wishlist> getWishlists() {
        return wishlists == null ? null : new HashSet<>(wishlists);
    }

    public void setWishlists(Set<Wishlist> wishlists) {
        this.wishlists = wishlists == null ? null : new HashSet<>(wishlists);
    }

    public Set<ShoppingCartItem> getShoppingCart() {
        return shoppingCart == null ? null : new HashSet<>(shoppingCart);
    }

    public void setShoppingCart(Set<ShoppingCartItem> shoppingCart) {
        this.shoppingCart = shoppingCart == null ? null : new HashSet<>(shoppingCart);
    }

    @Override
    public int hashCode() {

        if (this instanceof HibernateProxy) {
            return ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation().hashCode();
        }

        int hash = 5;
        hash = 53 * hash + this.getId();
        hash = 53 * hash + Objects.hashCode(this.personAddressLink);
        hash = 53 * hash + Objects.hashCode(this.username);
        hash = 53 * hash + Objects.hashCode(this.password);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {

        if (this == obj) {
            return true;
        }

        if (obj == null) {
            return false;
        }

        if (this instanceof HibernateProxy) {
            return ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation().equals(obj);
        }

        if (obj instanceof HibernateProxy) {
            return equals(((HibernateProxy) obj).getHibernateLazyInitializer().getImplementation());
        }

        if (getClass() != obj.getClass()) {
            return false;
        }

        final CustomerPojo other = (CustomerPojo) obj;
        if (this.getId() != other.getId()) {
            return false;
        }

        if (!Objects.equals(this.personAddressLink, other.personAddressLink)) {
            return false;
        }

        if (!Objects.equals(this.username, other.username)) {
            return false;
        }

        if (!Objects.equals(this.password, other.password)) {
            return false;
        }

        return Arrays.equals(this.image, other.image);
    }

    @Override
    public boolean hasSameConstraint(Customer customer) {

        if (this == customer) {
            return true;
        }

        if (customer == null) {
            return false;
        }

        if (this instanceof HibernateProxy) {
            return customer.hasSameConstraint(((Customer) ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation()));
        }

        if (customer instanceof HibernateProxy) {
            return hasSameConstraint(((Customer) (((HibernateProxy) customer).getHibernateLazyInitializer().getImplementation())));
        }

        return Objects.equals(this.username, customer.getUsername());
    }

    @Override
    public boolean hasSameParameters(Customer customer) {

        if (this == customer) {
            return true;
        }

        if (customer == null) {
            return false;
        }

        if (this instanceof HibernateProxy) {
            return customer.hasSameParameters(((Customer) ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation()));
        }

        if (customer instanceof HibernateProxy) {
            return hasSameParameters(((Customer) (((HibernateProxy) customer).getHibernateLazyInitializer().getImplementation())));
        }

        if (!Objects.equals(password, customer.getPassword())) {
            return false;
        }

        if (!Objects.equals(username, customer.getUsername())) {
            return false;
        }

        if (!Arrays.equals(image, customer.getImage())) {
            return false;
        }

        return ConstrainableUtilities.hasSameParameters(personAddressLink, customer.getPersonAddressLink());
    }

    @Override
    public String toString() {
        return "CustomerPojo{id=" + id + ", username=" + username + '}';
    }

}
