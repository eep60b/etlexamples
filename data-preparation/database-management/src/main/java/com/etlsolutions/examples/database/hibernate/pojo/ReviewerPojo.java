/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.etlsolutions.examples.database.hibernate.pojo;
// Generated 04-Dec-2015 14:16:58 by Hibernate Tools 4.3.1

import com.etlsolutions.examples.utility.ConstrainableUtilities;
import com.etlsolutions.examples.data.api.Review;
import com.etlsolutions.examples.data.api.Reviewer;
import com.etlsolutions.examples.data.spi.ReviewerSpi;
import java.io.Serializable;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import org.hibernate.proxy.HibernateProxy;

/**
 * The ReviewerPojo class is generated automatically then modified manually.
 *
 * @author Zhipeng Chang
 *
 * @since 1.0.0
 *
 * @version 1.0.0 - Generated by NetBeans.
 * @version 1.1.0 - Use the integer type for the "id" field.
 * @version 1.2.0 - Use the byte[] type for the "image" field.
 * @version 1.2.1 - Set the initial capacities for the set fields.
 */
public class ReviewerPojo implements Serializable, ReviewerSpi<PersonalDetailPojo> {

    private static final long serialVersionUID = 193588258402865933L;

    private int id;
    private PersonalDetailPojo personalDetail;
    private byte[] image;
    private String username;
    private String password;
    private Set<Review> reviews = new HashSet<>(10);

    /**
     * Construct a default object with no fields initialised.
     */
    public ReviewerPojo() {
    }

    /**
     * Construct an object using the given ID, username and password.
     *
     * @param id - The ID number.
     * @param username - The given username.
     * @param password - The given password. ReviewerPojo instance = new
     * ReviewerPojo(id, personalDetailPojo, image, username, password,
     * reviewPojos); ReviewerPojo instance = new ReviewerPojo(id,
     * personalDetailPojo, image, username, password, reviewPojos); ReviewerPojo
     * instance = new ReviewerPojo(id, personalDetailPojo, image, username,
     * password, reviewPojos); ReviewerPojo instance = new ReviewerPojo(id,
     * personalDetailPojo, image, username, password, reviewPojos);
     */
    public ReviewerPojo(int id, String username, String password) {
        this.id = id;
        this.username = username;
        this.password = password;
    }

    /**
     * Construct an object
     *
     * @param personalDetail
     * @param image
     * @param username
     * @param password
     */
    public ReviewerPojo(PersonalDetailPojo personalDetail, byte[] image, String username, String password) {
        this.personalDetail = personalDetail;
        this.image = image == null ? null : Arrays.copyOf(image, image.length);
        this.username = username;
        this.password = password;
    }

    /**
     * Construct an object with all fields initialised.
     *
     * @param id
     * @param personalDetail
     * @param image
     * @param username
     * @param password
     */
    public ReviewerPojo(int id, PersonalDetailPojo personalDetail, byte[] image, String username, String password) {
        this(personalDetail, image, username, password);
        this.id = id;
    }
    
    /**
     * Construct an object with all fields initialised.
     *
     * @param id
     * @param personalDetail
     * @param image
     * @param username
     * @param password
     * @param reviews
     */
    public ReviewerPojo(int id, PersonalDetailPojo personalDetail, byte[] image, String username, String password, Set<Review> reviews) {
        this(personalDetail, image, username, password);
        this.id = id;
        this.reviews = reviews == null ? null : new HashSet<>(reviews);
    }

    @Override
    public int getId() {
        return this.id;
    }

    @Override
    public void setId(int id) {
        this.id = id;
    }

    @Override
    public PersonalDetailPojo getPersonalDetail() {
        return this.personalDetail;
    }

    @Override
    public void setPersonalDetail(PersonalDetailPojo personalDetail) {
        this.personalDetail = personalDetail;
    }

    @Override
    public byte[] getImage() {
        return image == null ? null : Arrays.copyOf(image, image.length);
    }

    @Override
    public void setImage(byte[] image) {
        this.image = image == null ? null : Arrays.copyOf(image, image.length);
    }

    @Override
    public String getUsername() {
        return this.username;
    }

    @Override
    public void setUsername(String username) {
        this.username = username;
    }

    @Override
    public String getPassword() {
        return this.password;
    }

    @Override
    public void setPassword(String password) {
        this.password = password;
    }

    public Set<Review> getReviews() {
        return reviews == null ? null : new HashSet<>(reviews);
    }

    public void setReviews(Set<Review> reviews) {
        this.reviews = reviews == null ? null : new HashSet<>(reviews);
    }

    @Override
    public boolean hasSameConstraint(Reviewer reviewer) {

        if (this == reviewer) {
            return true;
        }

        if (reviewer == null) {
            return false;
        }

        if (this instanceof HibernateProxy) {
            return reviewer.hasSameConstraint(((Reviewer) ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation()));
        }

        if (reviewer instanceof HibernateProxy) {
            return hasSameConstraint(((Reviewer) (((HibernateProxy) reviewer).getHibernateLazyInitializer().getImplementation())));
        }

        return Objects.equals(getUsername(), reviewer.getUsername());
    }

    @Override
    public boolean hasSameParameters(Reviewer reviewer) {

        if (this == reviewer) {
            return true;
        }

        if (reviewer == null) {
            return false;
        }

        if (this instanceof HibernateProxy) {
            return reviewer.hasSameParameters(((Reviewer) ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation()));
        }

        if (reviewer instanceof HibernateProxy) {
            return hasSameParameters(((Reviewer) (((HibernateProxy) reviewer).getHibernateLazyInitializer().getImplementation())));
        }

        if (!Objects.equals(this.username, reviewer.getUsername())) {
            return false;
        }

        if (!Objects.equals(this.password, reviewer.getPassword())) {
            return false;
        }

        if (!Arrays.equals(this.image, reviewer.getImage())) {
            return false;
        }

        return ConstrainableUtilities.hasSameParameters(personalDetail, reviewer.getPersonalDetail());
    }

    @Override
    public int hashCode() {

        if (this instanceof HibernateProxy) {
            return ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation().hashCode();
        }

        int hash = 3;
        hash = 53 * hash + this.id;
        hash = 53 * hash + Objects.hashCode(this.personalDetail);
        hash = 53 * hash + Objects.hashCode(this.username);
        hash = 53 * hash + Objects.hashCode(this.password);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {

        if (obj == null) {
            return false;
        }

        if (this instanceof HibernateProxy) {
            return ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation().equals(obj);
        }

        if (obj instanceof HibernateProxy) {
            return equals(((HibernateProxy) obj).getHibernateLazyInitializer().getImplementation());
        }

        if (getClass() != obj.getClass()) {
            return false;
        }

        final ReviewerPojo other = (ReviewerPojo) obj;
        if (this.id != other.id) {
            return false;
        }

        if (!Objects.equals(this.personalDetail, other.personalDetail)) {
            return false;
        }

        if (!Arrays.equals(this.image, other.image)) {
            return false;
        }

        if (!Objects.equals(this.username, other.username)) {
            return false;
        }

        return Objects.equals(this.password, other.password);
    }

    @Override
    public String toString() {
        return "ReviewerPojo{name=" + personalDetail == null ? null : (personalDetail.getGivenName() + " " + personalDetail.getFamilyName()) + ", username=" + username + '}';
    }
}
