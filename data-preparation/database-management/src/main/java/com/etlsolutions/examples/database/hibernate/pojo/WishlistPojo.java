/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.etlsolutions.examples.database.hibernate.pojo;
// Generated 19-Nov-2015 11:29:31 by Hibernate Tools 4.3.1

import com.etlsolutions.examples.utility.ConstrainableUtilities;
import com.etlsolutions.examples.data.api.ItemCommonDetail;
import com.etlsolutions.examples.data.api.Wishlist;
import com.etlsolutions.examples.data.spi.WishlistSpi;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import org.hibernate.proxy.HibernateProxy;

/**
 * The WishlistPojo class is generated automatically then modified manually.
 *
 * @author Zhipeng Chang
 *
 * @since 1.0.0
 *
 * @version 1.0.0 - Generated by NetBeans.
 * @version 2.0.0 - Changed the set type from BookPojo to ItemCommonDetaiPojo.
 * @version 2.1.0 - Use the integer type for the field "wishlistId".
 * @version 2.1.1 - Change the field name from "wishlistId" to "id".
 * @version 2.1.2 - Change the field name from "wishlistName" to "name".
 * @version 2.2.0 - Add implementation of WishlistSpi.
 */
public class WishlistPojo implements Serializable, WishlistSpi<CustomerPojo> {

    private static final long serialVersionUID = 300953292910007445L;

    private int id;
    private CustomerPojo customer;
    private String name;
    private Set<ItemCommonDetail> itemCommonDetails = new HashSet<>(0);

    /**
     * Construct a default object with no fields are initialised.
     */
    public WishlistPojo() {
    }

    /**
     * Construct an object using the given name and customer information.
     *
     * @param customer - The object which contains the customer information.
     * @param name - The wishlist name.
     */
    public WishlistPojo(CustomerPojo customer, String name) {
        this.customer = customer;
        this.name = name;
    }

    /**
     * Construct a named WishlistPojo object for the given customer.
     * @param id
     * @param customer
     * @param name
     */
    public WishlistPojo(int id, CustomerPojo customer, String name) {
        this.id = id;
        this.customer = customer;
        this.name = name;
    }

    /**
     *
     * @param id
     * @param customer
     * @param name
     * @param itemCommonDetails
     */
    public WishlistPojo(int id, CustomerPojo customer, String name, Set<ItemCommonDetail> itemCommonDetails) {
        this.id = id;
        this.customer = customer;
        this.name = name;
        this.itemCommonDetails = itemCommonDetails == null ? null : new HashSet<>(itemCommonDetails);
    }

    @Override
    public int getId() {
        return this.id;
    }

    @Override
    public void setId(int id) {
        this.id = id;
    }

    @Override
    public CustomerPojo getCustomer() {
        return this.customer;
    }

    @Override
    public void setCustomer(CustomerPojo customer) {
        this.customer = customer;
    }

    @Override
    public String getName() {
        return this.name;
    }

    @Override
    public void setName(String name) {
        this.name = name;
    }

    public Set<ItemCommonDetail> getItemCommonDetails() {
        return itemCommonDetails == null ? null : new HashSet<>(itemCommonDetails);
    }

    public void setItemCommonDetails(Set<ItemCommonDetail> itemCommonDetails) {
        this.itemCommonDetails = itemCommonDetails == null ? null : new HashSet<>(itemCommonDetails);
    }

    @Override
    public boolean hasSameConstraint(Wishlist wishlist) {

        if (this == wishlist) {
            return true;
        }

        if (wishlist == null) {
            return false;
        }

        if (this instanceof HibernateProxy) {
            return wishlist.hasSameConstraint(((Wishlist) ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation()));
        }

        if (wishlist instanceof HibernateProxy) {
            return hasSameConstraint(((Wishlist) (((HibernateProxy) wishlist).getHibernateLazyInitializer().getImplementation())));
        }
   
        if (!Objects.equals(name, wishlist.getName())) {
            return false;
        }
        
        return ConstrainableUtilities.hasSameConstraint(customer, wishlist.getCustomer());
    }

    @Override
    public boolean hasSameParameters(Wishlist wishlist) {
        if (this == wishlist) {
            return true;
        }

        if (wishlist == null) {
            return false;
        }

        if (this instanceof HibernateProxy) {
            return wishlist.hasSameParameters(((Wishlist) ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation()));
        }

        if (wishlist instanceof HibernateProxy) {
            return hasSameParameters(((Wishlist) (((HibernateProxy) wishlist).getHibernateLazyInitializer().getImplementation())));
        }
   
        if (!Objects.equals(name, wishlist.getName())) {
            return false;
        }

        return ConstrainableUtilities.hasSameParameters(customer, wishlist.getCustomer());
    }

    @Override
    public int hashCode() {
        
        if (this instanceof HibernateProxy) {
            return ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation().hashCode();
        }
        
        int hash = 7;
        hash = 59 * hash + this.getId();
        hash = 59 * hash + Objects.hashCode(this.customer);
        hash = 59 * hash + Objects.hashCode(this.name);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {

        if (this == obj) {
            return true;
        }

        if (obj == null) {
            return false;
        }

        if(this instanceof HibernateProxy) {
            return ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation().equals(obj);
        }

        if(obj instanceof HibernateProxy) {
            return equals(((HibernateProxy)obj).getHibernateLazyInitializer().getImplementation());
        }
        
        if (getClass() != obj.getClass()) {
            return false;
        }

        final WishlistPojo other = (WishlistPojo) obj;

        if (this.getId() != other.getId()) {
            return false;
        }

        if (!Objects.equals(this.customer, other.customer)) {
            return false;
        }

        return Objects.equals(this.name, other.name);
    }

    @Override
    public String toString() {
        return "WishlistPojo{id=" + id + ", customer=" + (customer == null ? null : customer.getUsername()) + ", name=" + name + '}';
    }
}
