/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.etlsolutions.examples.database.hibernate.pojo;
// Generated 04-Dec-2015 14:16:58 by Hibernate Tools 4.3.1

import com.etlsolutions.examples.data.api.AvailabilityType;
import com.etlsolutions.examples.data.api.CurrencyCode;
import com.etlsolutions.examples.data.api.ItemCommonDetail;
import com.etlsolutions.examples.data.spi.ItemCommonDetailSpi;
import com.etlsolutions.examples.utility.NumberUtilities;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import org.hibernate.proxy.HibernateProxy;

/**
 * The ItemCommonDetailPojo class is generated automatically then modified
 * manually.
 *
 * @author Zhipeng Chang
 *
 * @since 1.0.0
 *
 * @version 1.0.0 - Generated by NetBeans.
 * @version 1.0.1 - Use generic types.
 * @version 1.0.2 - An a non-pojo-class constructor.
 * @version 1.0.3 - Change the field name from "itemCommonDetailId" to "id".
 * @version 1.1.0 - Use the integer type for the field "id".
 * @version 1.1.1 - Use the byte[] type for the field image.
 * @version 1.1.2 - Use the integer type for the field ranking.
 * @version 1.1.3 - Change the field name "itemName" to "name".
 * @version 1.1.4 - Set the initial capacities for the set fields.
 * @version 1.2.0 - Add implementation of ItemCommonDetailSpi.
 */
public class ItemCommonDetailPojo implements Serializable, ItemCommonDetailSpi {

    private static final long serialVersionUID = 977638961871788250L;

    private int id;
    private String name;
    private byte[] image;
    private BigDecimal listPrice;
    private BigDecimal salePrice;
    private CurrencyCode currencyCode;
    private int ranking;
    private String description;
    private AvailabilityType availability;
    private int availabilityNumber;
    private String barcode;
    private Set<ReviewPojo> reviews = new HashSet<>(20);
    private Set<ShoppingCartItemPojo> shoppingCart = new HashSet<>(5);
    private Set<BookPojo> books = new HashSet<>(1);
    private Set<WishlistPojo> wishlists = new HashSet<>(100);
    private Set<CategoryPojo> categories = new HashSet<>(5);
    private Set<SoldItemPojo> soldItems = new HashSet<>(100);

    /**
     * Construct a default object with no fields are initialised.
     */
    public ItemCommonDetailPojo() {
    }

    /**
     * Construct an object with all the necessary information to populate the
     * table columns.
     *
     * @param id
     * @param name
     * @param listPrice
     * @param salePrice
     * @param currencyCode
     * @param availability
     * @param barcode
     */
    public ItemCommonDetailPojo(int id, String name, BigDecimal listPrice, BigDecimal salePrice, CurrencyCode currencyCode, AvailabilityType availability, String barcode) {

        this.id = id;
        this.name = name;
        this.listPrice = listPrice;
        this.salePrice = salePrice;
        this.currencyCode = currencyCode;
        this.availability = availability;
        this.barcode = barcode;
    }

    /**
     * Construct an object with all the fields except ID and sets initialised.
     *
     * @param name
     * @param image
     * @param listPrice
     * @param salePrice
     * @param currencyCode
     * @param ranking
     * @param description
     * @param availability
     * @param barcode
     * @param availabilityNumber
     */
    public ItemCommonDetailPojo(String name, byte[] image, BigDecimal listPrice, BigDecimal salePrice, CurrencyCode currencyCode, int ranking, String description, AvailabilityType availability, int availabilityNumber, String barcode) {

        this.name = name;
        this.image = image == null ? null : Arrays.copyOf(image, image.length);
        this.listPrice = listPrice;
        this.salePrice = salePrice;
        this.currencyCode = currencyCode;
        this.ranking = ranking;
        this.description = description;
        this.availability = availability;
        this.barcode = barcode;
        this.availabilityNumber = availabilityNumber;
    }

    /**
     * Construct an object with all the fields except sets initialised.
     *
     * @param id
     * @param name
     * @param image
     * @param listPrice
     * @param salePrice
     * @param currencyCode
     * @param ranking
     * @param description
     * @param availability
     * @param barcode
     * @param availabilityNumber
     */
    public ItemCommonDetailPojo(int id, String name, byte[] image, BigDecimal listPrice, BigDecimal salePrice, CurrencyCode currencyCode, int ranking, String description, AvailabilityType availability, int availabilityNumber, String barcode) {
        this(name, image, listPrice, salePrice, currencyCode, ranking, description, availability, availabilityNumber, barcode);
        this.id = id;
    }

    /**
     *
     * @param itemCommonDetail
     */
    public ItemCommonDetailPojo(ItemCommonDetail itemCommonDetail) {
        this(itemCommonDetail.getName(), itemCommonDetail.getImage(), itemCommonDetail.getListPrice(),
                itemCommonDetail.getSalePrice(), itemCommonDetail.getCurrencyCode(),
                itemCommonDetail.getRanking(), itemCommonDetail.getDescription(),
                itemCommonDetail.getAvailability(), itemCommonDetail.getAvailabilityNumber(), itemCommonDetail.getBarcode());
    }

    /**
     * Construct an object with all fields being initialised.
     *
     * @param id - The object id.
     * @param name - The item name.
     * @param image - The item image.
     * @param listPrice - The list price of the item.
     * @param salePrice - The sale price of the item.
     * @param currencyCode - The currency code for prices.
     * @param ranking - The overall ranking of the item.
     * @param description - The description of the item.
     * @param availability - The availability of the item.
     * @param availabilityNumber
     * @param barcode
     * @param reviews
     * @param shoppingCart
     * @param books
     * @param wishlists
     * @param categories
     * @param soldItems
     */
    public ItemCommonDetailPojo(int id, String name, byte[] image, BigDecimal listPrice, BigDecimal salePrice,
            CurrencyCode currencyCode, int ranking, String description, AvailabilityType availability,
            int availabilityNumber, String barcode, Set<ReviewPojo> reviews, Set<ShoppingCartItemPojo> shoppingCart, Set<BookPojo> books,
            Set<WishlistPojo> wishlists, Set<CategoryPojo> categories, Set<SoldItemPojo> soldItems) {
        this(id, name, image, listPrice, salePrice, currencyCode, ranking, description, availability, availabilityNumber, barcode);
        this.reviews = reviews == null ? null : new HashSet<>(reviews);
        this.shoppingCart = shoppingCart == null ? null : new HashSet<>(shoppingCart);
        this.books = books == null ? null : new HashSet<>(books);
        this.wishlists =  wishlists == null ? null : new HashSet<>(wishlists);
        this.categories = categories == null ? null : new HashSet<>(categories);
        this.soldItems = soldItems == null ? null : new HashSet<>(soldItems);
    }

    @Override
    public int getId() {
        return this.id;
    }

    @Override
    public void setId(int id) {
        this.id = id;
    }

    @Override
    public String getName() {
        return this.name;
    }

    @Override
    public void setName(String name) {
        this.name = name;
    }

    @Override
    public byte[] getImage() {
        return image == null ? null : Arrays.copyOf(image, image.length);
    }

    @Override
    public void setImage(byte[] image) {
        this.image = image == null ? null : Arrays.copyOf(image, image.length);
    }

    @Override
    public BigDecimal getListPrice() {
        return this.listPrice;
    }

    @Override
    public void setListPrice(BigDecimal listPrice) {
        this.listPrice = listPrice;
    }

    @Override
    public BigDecimal getSalePrice() {
        return this.salePrice;
    }

    @Override
    public void setSalePrice(BigDecimal salePrice) {
        this.salePrice = salePrice;
    }

    @Override
    public CurrencyCode getCurrencyCode() {
        return this.currencyCode;
    }

    @Override
    public void setCurrencyCode(CurrencyCode currencyCode) {
        this.currencyCode = currencyCode;
    }

    @Override
    public int getRanking() {
        return this.ranking;
    }

    @Override
    public void setRanking(int ranking) {
        this.ranking = ranking;
    }

    @Override
    public String getDescription() {
        return this.description;
    }

    @Override
    public void setDescription(String description) {
        this.description = description;
    }

    @Override
    public AvailabilityType getAvailability() {
        return this.availability;
    }

    @Override
    public void setAvailability(AvailabilityType availability) {
        this.availability = availability;
    }

    @Override
    public int getAvailabilityNumber() {
        return this.availabilityNumber;
    }

    @Override
    public void setAvailabilityNumber(int availabilityNumber) {
        this.availabilityNumber = availabilityNumber;
    }

    @Override
    public String getBarcode() {
        return barcode;
    }

    @Override
    public void setBarcode(String barcode) {
        this.barcode = barcode;
    }

    public Set<ReviewPojo> getReviews() {
        return reviews == null ? null : new HashSet<>(reviews);
    }

    public void setReviews(Set<ReviewPojo> reviews) {
        this.reviews = reviews == null ? null : new HashSet<>(reviews);
    }

    /**
     *
     * @return
     */
    public Set<ShoppingCartItemPojo> getShoppingCart() {
        return shoppingCart == null ? null : new HashSet<>(shoppingCart);
    }

    /**
     *
     * @param shoppingCart
     */
    public void setShoppingCart(Set<ShoppingCartItemPojo> shoppingCart) {
        this.shoppingCart = shoppingCart == null ? null : new HashSet<>(shoppingCart);
    }

    /**
     *
     * @return
     */
    public Set<BookPojo> getBooks() {
        return books == null ? null : new HashSet<>(books);
    }

    /**
     *
     * @param books
     */
    public void setBooks(Set<BookPojo> books) {
        this.books = books == null ? null : new HashSet<>(books);
    }

    /**
     *
     * @return
     */
    public Set<WishlistPojo> getWishlists() {
        return  wishlists == null ? null : new HashSet<>(wishlists);
    }

    /**
     *
     * @param wishlists
     */
    public void setWishlists(Set<WishlistPojo> wishlists) {
        this.wishlists = wishlists == null ? null : new HashSet<>(wishlists);
    }

    /**
     *
     * @return
     */
    public Set<CategoryPojo> getCategories() {
        return categories == null ? null : new HashSet<>(categories);
    }

    /**
     *
     * @param categories
     */
    public void setCategories(Set<CategoryPojo> categories) {
        this.categories = categories == null ? null : new HashSet<>(categories);
    }

    /**
     *
     * @return
     */
    public Set<SoldItemPojo> getSoldItems() {
        return soldItems == null ? null : new HashSet<>(soldItems);
    }

    public void setSoldItems(Set<SoldItemPojo> soldItems) {
        this.soldItems = soldItems == null ? null : new HashSet<>(soldItems);
    }

    @Override
    public boolean hasSameConstraint(ItemCommonDetail itemCommonDetail) {

        if (this == itemCommonDetail) {
            return true;
        }

        if (itemCommonDetail == null) {
            return false;
        }

        if (this instanceof HibernateProxy) {
            return itemCommonDetail.hasSameConstraint(((ItemCommonDetail) ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation()));
        }

        if (itemCommonDetail instanceof HibernateProxy) {
            return hasSameConstraint(((ItemCommonDetail) (((HibernateProxy) itemCommonDetail).getHibernateLazyInitializer().getImplementation())));
        }

        return Objects.equals(barcode, itemCommonDetail.getBarcode());
    }

    @Override
    public boolean hasSameParameters(ItemCommonDetail itemCommonDetail) {

        if (this == itemCommonDetail) {
            return true;
        }

        if (itemCommonDetail == null) {
            return false;
        }

        if (this instanceof HibernateProxy) {
            return itemCommonDetail.hasSameParameters(((ItemCommonDetail) ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation()));
        }

        if (itemCommonDetail instanceof HibernateProxy) {
            return hasSameParameters(((ItemCommonDetail) (((HibernateProxy) itemCommonDetail).getHibernateLazyInitializer().getImplementation())));
        }

        if (!Objects.equals(name, itemCommonDetail.getName())) {
            return false;
        }

        if (!NumberUtilities.equals(listPrice, itemCommonDetail.getListPrice(), 2)) {
            return false;
        }

        if (!NumberUtilities.equals(salePrice, itemCommonDetail.getSalePrice(), 2)) {
            return false;
        }

        if (currencyCode != itemCommonDetail.getCurrencyCode()) {
            return false;
        }

        if (!Objects.equals(name, itemCommonDetail.getName())) {
            return false;
        }

        if (ranking != itemCommonDetail.getRanking()) {
            return false;
        }

        if (!Objects.equals(description, itemCommonDetail.getDescription())) {
            return false;
        }

        if (availability != itemCommonDetail.getAvailability()) {
            return false;
        }

        if (availabilityNumber != itemCommonDetail.getAvailabilityNumber()) {
            return false;
        }

        if(!Objects.equals(barcode, itemCommonDetail.getBarcode())){
            return false;
        }
        
        return Arrays.equals(image, itemCommonDetail.getImage());
    }

    @Override
    public int hashCode() {

        if (this instanceof HibernateProxy) {
            return ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation().hashCode();
        }

        int hash = 5;
        hash = 97 * hash + this.id;
        hash = 97 * hash + Objects.hashCode(this.name);
        hash = 97 * hash + Objects.hashCode(this.listPrice);
        hash = 97 * hash + Objects.hashCode(this.salePrice);
        hash = 97 * hash + Objects.hashCode(this.currencyCode);
        hash = 97 * hash + this.ranking;
        hash = 97 * hash + Objects.hashCode(this.description);
        hash = 97 * hash + Objects.hashCode(this.availability);
        hash = 97 * hash + this.availabilityNumber;
        hash = 97 * hash + Objects.hashCode(this.barcode);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {

        if (obj == this) {
            return true;
        }

        if (obj == null) {
            return false;
        }

        if (this instanceof HibernateProxy) {
            return ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation().equals(obj);
        }

        if (obj instanceof HibernateProxy) {
            return equals(((HibernateProxy) obj).getHibernateLazyInitializer().getImplementation());
        }

        if (getClass() != obj.getClass()) {
            return false;
        }

        final ItemCommonDetailPojo other = (ItemCommonDetailPojo) obj;

        if (getId() != other.getId()) {
            return false;
        }

        if (!Objects.equals(this.name, other.name)) {
            return false;
        }

        if (!Arrays.equals(this.image, other.image)) {
            return false;
        }

        if (!NumberUtilities.equals(listPrice, other.getListPrice(), 2)) {
            return false;
        }

        if (!NumberUtilities.equals(salePrice, other.getSalePrice(), 2)) {
            return false;
        }

        if (this.currencyCode != other.currencyCode) {
            return false;
        }

        if (this.ranking != other.ranking) {
            return false;
        }

        if (!Objects.equals(this.description, other.description)) {
            return false;
        }

        if (this.availability != other.availability) {
            return false;
        }

        if (this.availabilityNumber != other.availabilityNumber) {
            return false;
        }

        return Objects.equals(this.barcode, other.barcode);
    }

}
