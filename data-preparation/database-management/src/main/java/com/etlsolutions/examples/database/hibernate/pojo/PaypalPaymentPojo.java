/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.etlsolutions.examples.database.hibernate.pojo;
// Generated 19-Nov-2015 11:29:31 by Hibernate Tools 4.3.1

import com.etlsolutions.examples.utility.ConstrainableUtilities;
import com.etlsolutions.examples.data.api.PaypalPayment;
import com.etlsolutions.examples.data.spi.PaypalPaymentSpi;
import java.io.Serializable;
import java.util.Objects;
import org.hibernate.proxy.HibernateProxy;

/**
 * PaypalPaymentPojo class is generated automatically then modified manually.
 *
 * @author Zhipeng Chang
 *
 * @since 1.0.0
 *
 * @version 1.0.0 - Generated by NetBeans.
 * @version 1.0.1 - Change the field name from "id" to "id".
 * @version 1.0.2 - Use the integer type for the field "id".
 */
public class PaypalPaymentPojo implements Serializable, PaypalPaymentSpi<PaymentDetailPojo> {

    private static final long serialVersionUID = 3393956445363967L;

    private int id;
    private PaymentDetailPojo paymentDetail;
    private String paypalAccountId;
    private String paypalIdentityToken;

    /**
     *
     */
    public PaypalPaymentPojo() {
    }

    /**
     *
     * @param paymentDetail
     * @param paypalAccountId
     * @param paypalIdentityToken
     */
    public PaypalPaymentPojo(PaymentDetailPojo paymentDetail, String paypalAccountId, String paypalIdentityToken) {
        this.paymentDetail = paymentDetail;
        this.paypalAccountId = paypalAccountId;
        this.paypalIdentityToken = paypalIdentityToken;
    }

    /**
     *
     * @param id
     * @param paymentDetail
     * @param paypalAccountId
     * @param paypalIdentityToken
     */
    public PaypalPaymentPojo(int id, PaymentDetailPojo paymentDetail, String paypalAccountId, String paypalIdentityToken) {

        this(paymentDetail, paypalAccountId, paypalIdentityToken);
        this.id = id;
    }

    @Override
    public int getId() {
        return this.id;
    }

    @Override
    public void setId(int id) {
        this.id = id;
    }

    @Override
    public PaymentDetailPojo getPaymentDetail() {
        return this.paymentDetail;
    }

    @Override
    public void setPaymentDetail(PaymentDetailPojo paymentDetail) {
        this.paymentDetail = paymentDetail;
    }

    @Override
    public String getPaypalAccountId() {
        return this.paypalAccountId;
    }

    @Override
    public void setPaypalAccountId(String paypalAccountId) {
        this.paypalAccountId = paypalAccountId;
    }

    @Override
    public String getPaypalIdentityToken() {
        return this.paypalIdentityToken;
    }

    @Override
    public void setPaypalIdentityToken(String paypalIdentityToken) {
        this.paypalIdentityToken = paypalIdentityToken;
    }

    @Override
    public boolean hasSameConstraint(PaypalPayment paypalPayment) {

        if (this == paypalPayment) {
            return true;
        }

        if (paypalPayment == null) {
            return false;
        }

        if (this instanceof HibernateProxy) {
            return paypalPayment.hasSameConstraint(((PaypalPayment) ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation()));
        }

        if (paypalPayment instanceof HibernateProxy) {
            return hasSameConstraint(((PaypalPayment) (((HibernateProxy) paypalPayment).getHibernateLazyInitializer().getImplementation())));
        }

        return ConstrainableUtilities.hasSameConstraint(paymentDetail, paypalPayment.getPaymentDetail());
    }

    @Override
    public boolean hasSameParameters(PaypalPayment paypalPayment) {

        if (this == paypalPayment) {
            return true;
        }

        if (paypalPayment == null) {
            return false;
        }

        if (this instanceof HibernateProxy) {
            return paypalPayment.hasSameParameters(((PaypalPayment) ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation()));
        }

        if (paypalPayment instanceof HibernateProxy) {
            return hasSameParameters(((PaypalPayment) (((HibernateProxy) paypalPayment).getHibernateLazyInitializer().getImplementation())));
        }

        if (!Objects.equals(this.paypalAccountId, paypalPayment.getPaypalAccountId())) {
            return false;
        }

        if (!Objects.equals(this.paypalIdentityToken, paypalPayment.getPaypalIdentityToken())) {
            return false;
        }

        return ConstrainableUtilities.hasSameParameters(paymentDetail, paypalPayment.getPaymentDetail());
    }

    @Override
    public int hashCode() {

        if (this instanceof HibernateProxy) {
            return ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation().hashCode();
        }

        int hash = 7;
        hash = 67 * hash + this.id;
        hash = 67 * hash + Objects.hashCode(this.paymentDetail);
        hash = 67 * hash + Objects.hashCode(this.paypalAccountId);
        hash = 67 * hash + Objects.hashCode(this.paypalIdentityToken);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {

        if (this == obj) {
            return true;
        }

        if (obj == null) {
            return false;
        }

        if (this instanceof HibernateProxy) {
            return ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation().equals(obj);
        }

        if (obj instanceof HibernateProxy) {
            return equals(((HibernateProxy) obj).getHibernateLazyInitializer().getImplementation());
        }

        if (getClass() != obj.getClass()) {
            return false;
        }

        final PaypalPaymentPojo other = (PaypalPaymentPojo) obj;

        if (this.id != other.id) {
            return false;
        }

        if (!Objects.equals(this.paymentDetail, other.paymentDetail)) {
            return false;
        }

        if (!Objects.equals(this.paypalAccountId, other.paypalAccountId)) {
            return false;
        }

        return Objects.equals(this.paypalIdentityToken, other.paypalIdentityToken);
    }

    @Override
    public String toString() {

        String payment;

        if (paymentDetail == null || paymentDetail.getInvoice() == null) {
            payment = "null";
        } else {
            payment = paymentDetail.getInvoice().getReferenceNumber();
        }

        return "PaypalPaymentPojo{invoice reference number=" + payment + ", paypal identity token=" + paypalIdentityToken + '}';
    }

}
