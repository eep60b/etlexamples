/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.etlsolutions.examples.database.hibernate.pojo;
// Generated 19-Nov-2015 11:29:31 by Hibernate Tools 4.3.1

import com.etlsolutions.examples.data.api.Address;
import com.etlsolutions.examples.data.spi.AddressSpi;
import com.etlsolutions.examples.utility.annotation.ConventionalJavaBeanClass;
import com.etlsolutions.examples.utility.annotation.DataClass;
import com.etlsolutions.examples.utility.annotation.NotThreadSafe;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import org.hibernate.proxy.HibernateProxy;

/**
 * The AddressPojo class is generated automatically then modified manually. It
 * represents an address.
 *
 * @author Zhipeng Chang
 *
 * @since 1.0.0
 *
 * @version 1.0.0 - Generated by NetBeans.
 * @version 1.1.0 - Add the AdministratorPojo set.
 * @version 1.1.1 - Use generic types.
 * @version 1.2.0 - Add equals and hashCode methods.
 * @version 1.2.1 - Add the static field serialVersionUID.
 * @version 1.2.2 - Change the field name from "addressId" to "id".
 * @version 1.2.3 - Add a non-POJO_constructor.
 * @version 1.2.4 - Remove the administrators field.
 * @version 1.2.5 - Set the initial capacities for the set fields.
 * @version 1.3.0 - Use integer type for ID.
 * @version 1.4.0 - Add the invoices set.
 * @version 1.3.0 - Implement the equals and hashCode methods for Hibernate. If
 * an AddressPojo class implements HibernateProxy in an standard way, i.e. , its
 * HibernateLazyInitializer can return an VoucherPojo object. that returned
 * VoucherPojo object will be used by equals and hashCode methods to compare.
 */
@ConventionalJavaBeanClass
@DataClass
@NotThreadSafe
public class AddressPojo implements Serializable, AddressSpi {

    private static final long serialVersionUID = 773071525280636712L;

    private int id;
    private String house;
    private String street;
    private String additional;
    private String city;
    private String area;
    private String postcode;
    private String country;
    private Set<PersonAddressLinkPojo> personAddressLinks = new HashSet<>(0); 
    private Set<PublisherPojo> publishers = new HashSet<>(0); 
    private Set<InvoicePojo> invoices = new HashSet<>(0);

    /**
     * Construct an empty default object. All integer fields are zero. all the
     * set fields will be empty. All other fields are null.
     */
    public AddressPojo() {
    }

    /**
     * Construct an object with only the compulsory fields.
     *
     * @param id - The address ID number.
     * @param house - The house name or house number.
     * @param street - The street name.
     * @param country - The country name of this address.
     */
    public AddressPojo(int id, String house, String street, String country) {
        this.id = id;
        this.house = house;
        this.street = street;
        this.country = country;
    }

    /**
     * Construct an object whose all fields apart from the ID and sets are initialised.
     *
     * @param house - The house name or house number.
     * @param street - The street name.
     * @param additional - The additional part of this address.
     * @param city - The city name of this address.
     * @param area - The area name of this address.
     * @param postcode - The postcode of this address.
     * @param country - The country name of this address.
     */
    public AddressPojo(String house, String street, String additional, String city, String area, String postcode, String country) {
        this.house = house;
        this.street = street;
        this.additional = additional;
        this.city = city;
        this.area = area;
        this.postcode = postcode;
        this.country = country;
    }

    /**
     * Construct an object with all fields except sets initialised.
     *
     * @param id - The address ID number.
     * @param house - The house name or house number.
     * @param street - The street name.
     * @param additional - The additional part of this address.
     * @param city - The city name of this address.
     * @param area - The area name of this address.
     * @param postcode - The postcode of this address.
     * @param country - The country name of this address.
     */
    public AddressPojo(int id, String house, String street, String additional, String city, String area, String postcode, String country) {
        this(house, street, additional, city, area, postcode, country);
        this.id = id;
    }

    /**
     * Construct an object using the parameters from a specified Address object.
     *
     * @param address - The specified Address object.
     */
    public AddressPojo(Address address) {
        this(address.getHouse(), address.getStreet(), address.getAdditional(), address.getCity(), address.getArea(), address.getPostcode(), address.getCountry());
    }

    /**
     * Construct an object with all the fields initialised.
     *
     * @param id - The address ID number.
     * @param house - The house name or house number.
     * @param street - The street name.
     * @param additional - The additional part of this address.
     * @param city - The city name of this address.
     * @param area - The area name of this address.
     * @param postcode - The postcode of this address.
     * @param country - The country name of this address.
     * @param personAddressLinks - The person-address-link of this address.
     * @param publishers - The publishers which uses this address.
     * @param invoices - The invoices which delivered to this address when this
     * address is different from the address used by the customer of that
     * invoice.
     */
    public AddressPojo(int id, String house, String street, String additional, String city, String area, String postcode, String country,
            Set<PersonAddressLinkPojo> personAddressLinks, Set<PublisherPojo> publishers, Set<InvoicePojo> invoices) {

        this(id, house, street, additional, city, area, postcode, country);
        this.personAddressLinks = personAddressLinks == null ? null : new HashSet<>(personAddressLinks);
        this.publishers = publishers == null ? null : new HashSet<>(publishers);
        this.invoices = invoices == null ? null : new HashSet<>(invoices);
    }

    @Override
    public int getId() {
        return this.id;
    }

    @Override
    public void setId(int id) {
        this.id = id;
    }

    @Override
    public String getHouse() {
        return house;
    }

    @Override
    public void setHouse(String house) {
        this.house = house;
    }

    @Override
    public String getStreet() {
        return this.street;
    }

    @Override
    public void setStreet(String addressMain) {
        this.street = addressMain;
    }

    @Override
    public String getAdditional() {
        return this.additional;
    }

    @Override
    public void setAdditional(String additional) {
        this.additional = additional;
    }

    @Override
    public String getCity() {
        return this.city;
    }

    @Override
    public void setCity(String city) {
        this.city = city;
    }

    @Override
    public String getArea() {
        return this.area;
    }

    @Override
    public void setArea(String area) {
        this.area = area;
    }

    @Override
    public final String getPostcode() {
        return this.postcode;
    }

    @Override
    public void setPostcode(String postcode) {
        this.postcode = postcode;
    }

    @Override
    public String getCountry() {
        return this.country;
    }

    @Override
    public void setCountry(String country) {
        this.country = country;
    }

    public Set<PersonAddressLinkPojo> getPersonAddressLinks() {
        return personAddressLinks == null ? null : new HashSet<>(personAddressLinks);
    }

    public void setPersonAddressLinks(Set<PersonAddressLinkPojo> personAddressLinks) {
        this.personAddressLinks = personAddressLinks == null ? null : new HashSet<>(personAddressLinks);
    }

    public Set<PublisherPojo> getPublishers() {
        return publishers == null ? null : new HashSet<>(publishers);
    }

    public void setPublishers(Set<PublisherPojo> publishers) {
        this.publishers = publishers == null ? null : new HashSet<>(publishers);
    }

    public Set<InvoicePojo> getInvoices() {
        return invoices == null ? null : new HashSet<>(invoices);
    }

    public void setInvoices(Set<InvoicePojo> invoices) {
        this.invoices = invoices == null ? null : new HashSet<>(invoices);
    }

    @Override
    public boolean hasSameConstraint(Address address) {

        if (this == address) {
            return true;
        }

        if (address == null) {
            return false;
        }

        if (this instanceof HibernateProxy) {
            return address.hasSameConstraint((Address)((HibernateProxy) this).getHibernateLazyInitializer().getImplementation());
        }

        if (address instanceof HibernateProxy) {
            return hasSameConstraint(((Address) (((HibernateProxy) address).getHibernateLazyInitializer().getImplementation())));
        }

        return Objects.equals(getHouse(), address.getHouse()) && Objects.equals(getStreet(), address.getStreet()) && Objects.equals(getAdditional(), address.getAdditional()) && Objects.equals(getArea(), address.getArea())
                && Objects.equals(getCity(), address.getCity()) && Objects.equals(getPostcode(), address.getPostcode()) && Objects.equals(getCountry(), address.getCountry());
    }

    @Override
    public boolean hasSameParameters(Address address) {
        return hasSameConstraint(address);
    }

    @Override
    public int hashCode() {

        if (this instanceof HibernateProxy) {
            return ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation().hashCode();
        }

        int hash = 7;
        hash = 89 * hash + this.getId();
        hash = 89 * hash + Objects.hashCode(this.house);
        hash = 89 * hash + Objects.hashCode(this.street);
        hash = 89 * hash + Objects.hashCode(this.additional);
        hash = 89 * hash + Objects.hashCode(this.city);
        hash = 89 * hash + Objects.hashCode(this.area);
        hash = 89 * hash + Objects.hashCode(this.postcode);
        hash = 89 * hash + Objects.hashCode(this.country);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {

        if (this == obj) {
            return true;
        }

        if (obj == null) {
            return false;
        }

        if (this instanceof HibernateProxy) {
            return ((HibernateProxy) this).getHibernateLazyInitializer().getImplementation().equals(obj);
        }

        if (obj instanceof HibernateProxy) {
            return equals(((HibernateProxy) obj).getHibernateLazyInitializer().getImplementation());
        }

        if (getClass() != obj.getClass()) {
            return false;
        }

        final AddressPojo other = (AddressPojo) obj;

        if (this.getId() != other.getId()) {
            return false;
        }

        if (!Objects.equals(this.house, other.house)) {
            return false;
        }

        if (!Objects.equals(this.street, other.street)) {
            return false;
        }

        if (!Objects.equals(this.additional, other.additional)) {
            return false;
        }

        if (!Objects.equals(this.city, other.city)) {
            return false;
        }

        if (!Objects.equals(this.area, other.area)) {
            return false;
        }

        if (!Objects.equals(this.postcode, other.postcode)) {
            return false;
        }

        return Objects.equals(this.country, other.country);
    }

    @Override
    public String toString() {
        return "AddressPojo{id=" + getId() + ", house=" + house + ", street=" + street + ", additional=" + additional + ", city=" + city + ", area=" + area + ", postcode=" + postcode + ", country=" + country + '}';
    }
}
