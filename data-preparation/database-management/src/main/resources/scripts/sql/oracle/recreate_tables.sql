-- This script re-create all the tables for the bookshop demonstration.
-- The script can only be used for the Oracle datbase.
-- The script is tested against Oracle 11g.
-- The tables will be dropped if they exist. A fresh set of tables then will be created with the constraint.
-- No data will be populated in this script.
-- Apart from the primary key, each table should have at least one unique constraint. 

-- author Zhipeng Chang
-- version 1.0.0 

-- Part one: Drop all the tables.

-- Drop the VOUCHER_PAYMENT table.

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE VOUCHER_PAYMENT';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
-- End of dropping the VOUCHER_PAYMENT table.

-- Drop the VOUCHER table.
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE VOUCHER';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
-- End of dropping the VOUCHER table.

-- Drop the PAYPAL_PAYMENT table.
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE PAYPAL_PAYMENT';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
-- End of dropping the PAYPAL_PAYMENT table.


-- Drop the DEBITCARD_PAYMENT table.
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE DEBITCARD_PAYMENT';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
-- End of dropping the DEBITCARD_PAYMENT table.


-- Drop the AMEXCARD_PAYMENT table.
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE AMEXCARD_PAYMENT';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
-- End of dropping the AMEXCARD_PAYMENT table.


-- Drop the VISACARD_PAYMENT table.
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE VISACARD_PAYMENT';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
-- End of dropping the VISACARD_PAYMENT table.


-- Drop the MASTERCARD_PAYMENT table.
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE MASTERCARD_PAYMENT';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
-- End of dropping the MASTERCARD_PAYMENT table.


-- Drop the PAYMENT_DETAIL table.
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE PAYMENT_DETAIL';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
-- End of dropping the PAYMENT_DETAIL table.


-- Drop the SHOPPING_CART_ITEM table.
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE SHOPPING_CART_ITEM';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
-- End of dropping the SHOPPING_CART_ITEM table.


-- Drop the WISHLIST_ITEM_LINK table.
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE WISHLIST_ITEM_LINK';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
-- End of dropping the WISHLIST_ITEM_LINK table.


-- Drop the WISHLIST table.
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE WISHLIST';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
-- End of dropping the WISHLIST_ITEM_LINK table.


-- Drop the SOLD_ITEM table.
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE SOLD_ITEM';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
-- End of dropping the SOLD_ITEM table.


-- Drop the AUTHOR_BOOK_LINK table.
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE AUTHOR_BOOK_LINK';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
-- End of dropping the AUTHOR_BOOK_LINK table.


-- Drop the AUTHOR table.
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE AUTHOR';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
-- End of dropping the AUTHOR table.


-- Drop the INVOICE table.
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE INVOICE';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/

-- Drop the diagram sequence INVOICE_SEQ.
BEGIN
  EXECUTE IMMEDIATE 'DROP SEQUENCE INVOICE_SEQ';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -2289 THEN
      RAISE;
    END IF;
END;
/
-- End of dropping the INVOICE table.


-- Drop the CUSTOMER table.
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE CUSTOMER';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/

-- Drop the diagram sequence CUSTOMER_SEQ.
BEGIN
  EXECUTE IMMEDIATE 'DROP SEQUENCE CUSTOMER_SEQ';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -2289 THEN
      RAISE;
    END IF;
END;
/
-- End of dropping the CUSTOMER table.


-- Drop the PERSON_ADDRESS_LINK table.
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE PERSON_ADDRESS_LINK';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
-- End of dropping the PERSON_ADDRESS_LINK table.


-- Drop the PERSON_TELEPHONE_LINK table.
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE PERSON_TELEPHONE_LINK';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
-- End of dropping the PERSON_TELEPHONE_LINK table.


-- Drop the ITEM_CATEGORY_LINK table.
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE ITEM_CATEGORY_LINK';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
-- End of dropping the ITEM_CATEGORY_LINK table.


-- Drop the REVIEW table.
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE REVIEW';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
-- End of dropping the REVIEW table.


-- Drop the BOOK table.
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE BOOK';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/

-- Drop the diagram sequence BOOK_SEQ.
BEGIN
  EXECUTE IMMEDIATE 'DROP SEQUENCE BOOK_SEQ';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -2289 THEN
      RAISE;
    END IF;
END;
/
-- End of dropping the BOOK table.

-- Drop the ITEM_COMMON_DETAIL table.
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE ITEM_COMMON_DETAIL';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
-- End of dropping the ITEM_COMMON_DETAIL table.


-- Drop the REVIEWER table.
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE REVIEWER';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
-- End of dropping the REVIEWER table.

-- Drop the ADMINISTRATOR table.
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE ADMINISTRATOR';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
-- End of dropping the ADMINISTRATOR table.

-- Drop the EMAIL table.
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE EMAIL';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
-- End of dropping the EMAIL table.

-- Drop the PERSONAL_DETAIL table.
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE PERSONAL_DETAIL';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
-- End of dropping the PERSONAL_DETAIL table.

-- Drop the TELEPHONE table.
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TELEPHONE';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
-- End of dropping the TELEPHONE table.

-- Drop the PUBLISHER table.
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE PUBLISHER';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/

-- Drop the CATEGORY table.

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE CATEGORY';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/

-- Drop the ADDRESS table.
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE ADDRESS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/

-- End of dropping the BOOK table.


-- Part two: Create all Tables.

-- Create the ADDRESS Table.
-- An address can be unique identified by the combination of all its column.
 CREATE TABLE ADDRESS
(
    ADDRESS_ID INT CHECK(ADDRESS_ID > 0),
    HOUSE      VARCHAR2(100) NOT NULL,
    STREET     VARCHAR2(400) NOT NULL,
    ADDITIONAL VARCHAR2(400),                 -- The addtional infomration which cannot be included in the main address.
    CITY       VARCHAR2(100),                 -- The city can be null since some country iteself is a city.
    AREA       VARCHAR2(100),                 -- The area can be a province, a state, a county etc. This column can be null.
    POSTCODE   VARCHAR2(100),                 -- The post code can be null since some area doesn't have a postcode.
    COUNTRY    VARCHAR2(200) NOT NULL,
    PRIMARY KEY (ADDRESS_ID),
    CONSTRAINT UNIQUE_ADDRESS UNIQUE(HOUSE, STREET, ADDITIONAL, CITY, AREA, POSTCODE, COUNTRY)   
)
/
-- End of the creation of ADDRESS table.

-- Create the CATEGORY table.
CREATE TABLE CATEGORY
(   
    CATEGORY_ID INT CHECK(CATEGORY_ID > 0),
    CATEGORY_NAME VARCHAR2(100) NOT NULL UNIQUE,
    PRIMARY KEY (CATEGORY_ID)   
)
/
-- End of the creation of CATEGORY table.


-- Create the PUBLISHER table.
CREATE TABLE PUBLISHER
(
    PUBLISHER_ID    INT CHECK(PUBLISHER_ID > 0),
    ADDRESS_ID      INT,
    PUBLISHER_NAME  VARCHAR2(100) NOT NULL UNIQUE,
    PRIMARY KEY (PUBLISHER_ID),
    FOREIGN KEY(ADDRESS_ID) REFERENCES ADDRESS(ADDRESS_ID) 
)
/
-- End of creating the PUBLISHER table

-- Create the TELEPHONE Table
CREATE TABLE TELEPHONE
(
    TELEPHONE_ID     INT CHECK(TELEPHONE_ID > 0),
    COUNTRY_CODE     VARCHAR2(5) NOT NULL,
    AREA_CODE        VARCHAR2(10),              -- This column can be null since very small country should have no area code. 
    TELEPHONE_NUMBER VARCHAR2(15) NOT NULL,    
    TELEPHONE_TYPE   VARCHAR2(20) NOT NULL CHECK (TELEPHONE_TYPE IN('MOBILE', 'HOME', 'OFFICE')),
    PRIMARY KEY (TELEPHONE_ID),
    CONSTRAINT UNIQUE_TELEPHONE UNIQUE(COUNTRY_CODE, AREA_CODE, TELEPHONE_NUMBER, TELEPHONE_TYPE)  -- The same number can be used as different purposes.
)
/
-- End of the creation of TELEPHONE table.

-- Create the PERSONAL_DETAIL Table
CREATE TABLE PERSONAL_DETAIL
(    
    PERSONAL_DETAIL_ID INT CHECK(PERSONAL_DETAIL_ID > 0),
    TITLE              VARCHAR2(40) NOT NULL,
    GIVEN_NAME         VARCHAR2(200) NOT NULL,
    FAMILY_NAME        VARCHAR2(200) NOT NULL,
    DATE_OF_BIRTH      DATE NOT NULL,
    PROFILE            BLOB NOT NULL,  -- This profile column should be unique but it cannot be set since it is a BLOB type.
    PRIMARY KEY (PERSONAL_DETAIL_ID)	  
)
/
-- End of the creation of PERSONAL_DETAIL table.

-- Create the EMAIL Table
CREATE TABLE EMAIL
(    
    EMAIL_ID             INT CHECK(EMAIL_ID > 0),
    PERSONAL_DETAIL_ID   INT,
    EMAIL_ADDRESS        VARCHAR2(200) NOT NULL UNIQUE,
    PRIMARY KEY(EMAIL_ID),
    FOREIGN KEY(PERSONAL_DETAIL_ID) REFERENCES PERSONAL_DETAIL(PERSONAL_DETAIL_ID)
)
/
-- End of the creation of EMAIL table.


-- Create the ADMINISTRATOR Table
 CREATE TABLE ADMINISTRATOR
(    
    ADMINISTRATOR_ID   INT CHECK(ADMINISTRATOR_ID > 0),
    PERSONAL_DETAIL_ID INT UNIQUE,     -- An administrator does not have to have his/her address declared. So PERSON_ADDRESS_LINK_ID is not used here.
    ADMINISTRATOR_ROLE VARCHAR2(10) NOT NULL CHECK(ADMINISTRATOR_ROLE IN ('OPERATOR', 'ADMIN', 'SYSTEM')),
    USERNAME           VARCHAR2(200)NOT NULL UNIQUE,
    PASSWORD           VARCHAR2(200)NOT NULL, 
    PRIMARY KEY(ADMINISTRATOR_ID), 
    FOREIGN KEY(PERSONAL_DETAIL_ID) REFERENCES PERSONAL_DETAIL(PERSONAL_DETAIL_ID)
)
/
-- End of creating the ADMINISTRATOR table

-- Create the REVIEWER table.
CREATE TABLE REVIEWER
(
   REVIEWER_ID 	      INT CHECK (REVIEWER_ID > 0),
   PERSONAL_DETAIL_ID INT,                            -- This column can be set to null because some reviewers may be anonymous.
   IMAGE              BLOB,
   USERNAME 	      VARCHAR2(200) NOT NULL UNIQUE,
   PASSWORD           VARCHAR2(200) NOT NULL,
   PRIMARY KEY(REVIEWER_ID),
   FOREIGN KEY(PERSONAL_DETAIL_ID) REFERENCES PERSONAL_DETAIL(PERSONAL_DETAIL_ID) ON DELETE SET NULL  
) 
/
-- End of the creation of REVIEWER table.

-- Create the ITEM_COMMON_DETAIL table.
CREATE TABLE ITEM_COMMON_DETAIL
(
   ITEM_COMMON_DETAIL_ID INT CHECK(ITEM_COMMON_DETAIL_ID > 0),
   ITEM_NAME             VARCHAR2(600) NOT NULL,  
   IMAGE                 BLOB,
   LIST_PRICE            NUMBER(10, 2) NOT NULL CHECK (LIST_PRICE > 0),
   SALE_PRICE            NUMBER(10, 2) NOT NULL CHECK(SALE_PRICE > 0),
   CURRENCY_CODE         VARCHAR2(3) NOT NULL CHECK(CURRENCY_CODE IN ('USD', 'BRP', 'EUR', 'RMB', 'YEN', 'DMK', 'SWF')),
   RANKING               INT DEFAULT 0 NOT NULL CHECK(RANKING >= 0),  -- The zero is used for unranked item.
   DESCRIPTION           VARCHAR2(4000),
   AVAILABILITY          VARCHAR2(20) NOT NULL CHECK(AVAILABILITY IN ('YES', 'TO_BE_PRODUCED', 'OUT_OF_STOCK')),
   AVAILABILITY_NUMBER   INT CHECK(AVAILABILITY_NUMBER >= 0),
   BARCODE               VARCHAR2(100) NOT NULL UNIQUE,
   PRIMARY KEY(ITEM_COMMON_DETAIL_ID)
) 
/
-- End of the creation of ITEM_COMMON_DETAIL table.

-- Create the BOOK table.
 CREATE TABLE BOOK 
(    
    BOOK_ID               INT CHECK(BOOK_ID > 0),
    ITEM_COMMON_DETAIL_ID INT UNIQUE,               -- This column must be quique since each book is an unique item.
    PUBLISHER_ID          INT,
    BOOK_ISBN             VARCHAR2(13) NOT NULL UNIQUE, 
    BOOK_PDF_CONTENT      BLOB,
    BOOK_EDITION          INT DEFAULT 1 NOT NULL CHECK(BOOK_EDITION > 0),
    PUBLISH_DATE          DATE,                                       -- This column can be null since some old books don't have a published date.
    BOOK_WIDTH            NUMBER(4, 1) CHECK(BOOK_WIDTH >= 0),        -- This column is nullable for the electronic version.
    BOOK_LENGTH           NUMBER(4, 1) CHECK(BOOK_LENGTH >= 0),       -- This column is nullable for the electronic version.
    BOOK_THICKNESS        NUMBER(4, 1) CHECK(BOOK_THICKNESS >= 0),    -- This column is nullable for the electronic version.
    UOM                   VARCHAR2(10) NOT NULL CHECK(UOM in ('IN', 'CM', 'ELECTRONIC')),
    BOOK_FORMAT           VARCHAR2(20) NOT NULL CHECK(BOOK_FORMAT IN ('PAPERBACK', 'HARDCOVER', 'ELECTRONIC')),
    BOOK_LANGUAGE         VARCHAR2(3) DEFAULT 'EN' NOT NULL,
    PRIMARY KEY(BOOK_ID),
    FOREIGN KEY(ITEM_COMMON_DETAIL_ID) REFERENCES ITEM_COMMON_DETAIL(ITEM_COMMON_DETAIL_ID),
    FOREIGN KEY(PUBLISHER_ID) REFERENCES PUBLISHER(PUBLISHER_ID)
)
/
-- CREATE SEQUENCE BOOK_SEQ START WITH 1 INCREMENT BY 1 NOMAXVALUE    
-- /
-- 
-- CREATE OR REPLACE TRIGGER BOOK_TRIGGER
-- BEFORE INSERT ON BOOK
-- FOR EACH ROW
--    BEGIN
--      SELECT BOOK_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
--    END;
-- /

-- End of the creation of BOOK table.

-- Create the REVIEW table.
CREATE TABLE REVIEW 
(    
    REVIEW_ID             INT CHECK (REVIEW_ID > 0),
    REVIEWER_ID           INT,
    ITEM_COMMON_DETAIL_ID INT,
    REVIEW_RANKING        INT CHECK (REVIEW_RANKING > 0),
    REVIEW_TEXT           VARCHAR2(4000),         -- 4000 is about the maximum length of this data type.
    PRIMARY KEY(REVIEW_ID),
    FOREIGN KEY(REVIEWER_ID) REFERENCES REVIEWER(REVIEWER_ID),
    FOREIGN KEY(ITEM_COMMON_DETAIL_ID) REFERENCES ITEM_COMMON_DETAIL(ITEM_COMMON_DETAIL_ID),
    CONSTRAINT UNIQUE_REVIEW UNIQUE(REVIEWER_ID, ITEM_COMMON_DETAIL_ID)  -- One reviewer is only allowed to write one review for each item.
)
/
-- End of the creation of REVIEW table.

-- Create the ITEM_CATEGORY_LINK table.
CREATE TABLE ITEM_CATEGORY_LINK 
(   
    ITEM_COMMON_DETAIL_ID   INT,
    CATEGORY_ID             INT,
    PRIMARY KEY(ITEM_COMMON_DETAIL_ID, CATEGORY_ID),
    FOREIGN KEY(ITEM_COMMON_DETAIL_ID) REFERENCES ITEM_COMMON_DETAIL(ITEM_COMMON_DETAIL_ID),
    FOREIGN KEY(CATEGORY_ID) REFERENCES CATEGORY(CATEGORY_ID)
)
/
-- End of the creation of ITEM_CATEGORY_LINK table.

-- Create the PERSON_TELEPHONE_LINK Table
CREATE TABLE PERSON_TELEPHONE_LINK
(    
    PERSONAL_DETAIL_ID INT,   
    TELEPHONE_ID       INT,
    PRIMARY KEY (PERSONAL_DETAIL_ID, TELEPHONE_ID),
    FOREIGN KEY (PERSONAL_DETAIL_ID) REFERENCES PERSONAL_DETAIL(PERSONAL_DETAIL_ID),
    FOREIGN KEY (TELEPHONE_ID) REFERENCES TELEPHONE(TELEPHONE_ID)
)
/
-- End of the creation of PERSON_TELEPHONE_LINK table.

-- Create the PERSON_ADDRESS_LINK Table
CREATE TABLE PERSON_ADDRESS_LINK
(   
    LINK_ID            INT CHECK(LINK_ID > 0),
    PERSONAL_DETAIL_ID INT,    
    ADDRESS_ID         INT,
    ADDRESS_TYPE       VARCHAR2(20) NOT NULL CHECK(ADDRESS_TYPE IN('CONTACT', 'DELIVERY', 'OPTIONAL', 'NEXT_OF_KIN')), 
    PRIMARY KEY (LINK_ID), 
    FOREIGN KEY(PERSONAL_DETAIL_ID) REFERENCES PERSONAL_DETAIL(PERSONAL_DETAIL_ID),
    FOREIGN KEY(ADDRESS_ID) REFERENCES ADDRESS(ADDRESS_ID),   
    CONSTRAINT UNIQUE_PERSON_ADDRESS_LINK UNIQUE (ADDRESS_ID, PERSONAL_DETAIL_ID, ADDRESS_TYPE)
)
/
-- End of the creation of PERSON_ADDRESS_LINK table.

-- Create the CUSTOMER Table
CREATE TABLE CUSTOMER
(    
    CUSTOMER_ID            INT CHECK (CUSTOMER_ID > 0),
    PERSON_ADDRESS_LINK_ID INT UNIQUE,                      -- A valid customer must have both personal detail and contact address. The constraint of contact address is too complicated to be included here. We use a trigger to inforce in in version 2.
    USERNAME               VARCHAR2(200) NOT NULL UNIQUE,
    PASSWORD               VARCHAR2(200) NOT NULL,
    IMAGE                  BLOB,
    PRIMARY KEY (CUSTOMER_ID),
    FOREIGN KEY(PERSON_ADDRESS_LINK_ID) REFERENCES PERSON_ADDRESS_LINK(LINK_ID) 	  
)
/

-- CREATE SEQUENCE CUSTOMER_SEQ START WITH 1 INCREMENT BY 1 NOMAXVALUE    
-- /
-- 
-- CREATE OR REPLACE TRIGGER CUSTOMER_TRIGGER
-- BEFORE INSERT ON CUSTOMER
-- FOR EACH ROW
--    BEGIN
--      SELECT CUSTOMER_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
--    END;
-- /

-- End of the creation of CUSTOMER table.


-- Create the INVOICE Table

CREATE TABLE INVOICE
(
    INVOICE_ID          INT CHECK (INVOICE_ID > 0),
    CUSTOMER_ID         INT,
    DELIVERY_ADDRESS_ID INT,                            -- If this column is NULL, the address linked to the CUSTOMER_ID should be used.
    INVOICE_DATE        DATE DEFAULT SYSDATE NOT NULL,
    TOTAL               NUMBER(10, 2) NOT NULL CHECK(TOTAL > 0),
    VALIDITY            VARCHAR2(3)  DEFAULT 'YES' NOT NULL CHECK(VALIDITY IN ('YES', 'NO')),
    REFERENCE_NUMBER    VARCHAR2(12) NOT NULL UNIQUE,
    PRIMARY KEY(INVOICE_ID),
    FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID),
    FOREIGN KEY(DELIVERY_ADDRESS_ID) REFERENCES ADDRESS(ADDRESS_ID) ON DELETE SET NULL
)
/

-- CREATE SEQUENCE INVOICE_SEQ START WITH 1 INCREMENT BY 1 NOMAXVALUE    
-- /
-- 
-- CREATE OR REPLACE TRIGGER INVOICE_TRIGGER
-- BEFORE INSERT ON INVOICE
-- FOR EACH ROW
--    BEGIN
--      SELECT INVOICE_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
--    END;
-- /

-- End of the creation the INVOICE table.

-- Create the AUTHOR Table
CREATE TABLE AUTHOR
(   
    AUTHOR_ID           INT CHECK (AUTHOR_ID > 0),
    PERSONAL_DETAIL_ID  INT UNIQUE,  -- An author does not have to have his/her address declared. So PERSON_ADDRESS_LINK_ID is not used here.
    IMAGE               BLOB,
    BIOGRAPHY           CLOB,
    WEBPAGE_URL         VARCHAR2(200),
    PRIMARY KEY(AUTHOR_ID),
    FOREIGN KEY(PERSONAL_DETAIL_ID) REFERENCES PERSONAL_DETAIL(PERSONAL_DETAIL_ID)	   
)
/
-- End of the creation of AUTHOR table

-- Create the AUTHOR_BOOK_LINK Table
CREATE TABLE AUTHOR_BOOK_LINK
(   
    AUTHOR_ID   INT,
    BOOK_ID     INT,
    PRIMARY KEY (AUTHOR_ID, BOOK_ID),  
    FOREIGN KEY(BOOK_ID) REFERENCES BOOK(BOOK_ID),
    FOREIGN KEY(AUTHOR_ID) REFERENCES AUTHOR(AUTHOR_ID)
)
/
-- End of the creation of AUTHOR_BOOK_LINK table

-- Create the SOLD_ITEM Table
CREATE TABLE SOLD_ITEM
(   
    SOLD_ITEM_ID          INT CHECK(SOLD_ITEM_ID > 0),
    INVOICE_ID            INT,
    ITEM_COMMON_DETAIL_ID INT,
    QUANTITY              INT NOT NULL CHECK (QUANTITY > 0),
    UNIT_PRICE            NUMBER(10, 2) NOT NULL CHECK(UNIT_PRICE > 0),
    PRIMARY KEY (SOLD_ITEM_ID),
    FOREIGN KEY(ITEM_COMMON_DETAIL_ID) REFERENCES ITEM_COMMON_DETAIL(ITEM_COMMON_DETAIL_ID),
    FOREIGN KEY(INVOICE_ID) REFERENCES INVOICE(INVOICE_ID), 
    CONSTRAINT UNIQUE_SOLD_ITEM UNIQUE(INVOICE_ID, ITEM_COMMON_DETAIL_ID)  
)
/
-- End of creating the SOLD_ITEM table

-- Create the WISHLIST Table
CREATE TABLE WISHLIST
(   
    WISHLIST_ID   INT CHECK (WISHLIST_ID > 0),
    WISHLIST_NAME VARCHAR2(100) NOT NULL,
    CUSTOMER_ID   INT,
    PRIMARY KEY(WISHLIST_ID),
    FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID),
    CONSTRAINT UNIQUE_NAME_CUSTOMER_ID UNIQUE (CUSTOMER_ID, WISHLIST_NAME)
)
/
-- End of the creation of WISHLIST table.

-- Create the WISHLIST_ITEM_LINK Table
CREATE TABLE WISHLIST_ITEM_LINK
(   
    WISHLIST_ID           INT,
    ITEM_COMMON_DETAIL_ID INT,
    PRIMARY KEY (WISHLIST_ID, ITEM_COMMON_DETAIL_ID),
    FOREIGN KEY(ITEM_COMMON_DETAIL_ID) REFERENCES ITEM_COMMON_DETAIL(ITEM_COMMON_DETAIL_ID),
    FOREIGN KEY(WISHLIST_ID) REFERENCES WISHLIST(WISHLIST_ID)    
)
/
-- End of hte creation of WISHLIST_ITEM_LINK table.

-- Create the SHOPPING_CART_ITEM table
CREATE TABLE SHOPPING_CART_ITEM
(
    SHOPPING_CART_ITEM_ID   INT CHECK(SHOPPING_CART_ITEM_ID > 0),
    CUSTOMER_ID             INT,
    ITEM_COMMON_DETAIL_ID   INT,
    UNIT_NUMBER             INT NOT NULL CHECK(UNIT_NUMBER > 0),
    PRIMARY KEY(SHOPPING_CART_ITEM_ID),
    FOREIGN KEY(ITEM_COMMON_DETAIL_ID) REFERENCES ITEM_COMMON_DETAIL(ITEM_COMMON_DETAIL_ID),
    FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID),
    CONSTRAINT UNIQUE_SHOPPING_CART UNIQUE(CUSTOMER_ID, ITEM_COMMON_DETAIL_ID)     
)
/
-- End of the creation of SHOPPING_CART_ITEM table.

-- Create the PAYMENT_DETAIL Table
 CREATE TABLE PAYMENT_DETAIL
(   
    PAYMENT_DETAIL_ID INT CHECK (PAYMENT_DETAIL_ID > 0) UNIQUE,  -- This field in intentionally set to unique.
    INVOICE_ID        INT,
    PAYMENT_TYPE      VARCHAR2(11) NOT NULL CHECK(PAYMENT_TYPE IN ('VISA_CARD', 'MASTER_CARD', 'DEBIT_CARD', 'AMEX_CARD', 'PAYPAL', 'VOUCHER')),
    SUBTOTAL          NUMBER(10, 2) NOT NULL CHECK(SUBTOTAL > 0),
    CURRENCY_CODE     VARCHAR2(3) NOT NULL CHECK(CURRENCY_CODE IN ('BRP', 'USD', 'EUR', 'RMB', 'YEN', 'DMK', 'SWF')),
    PRIMARY KEY(PAYMENT_DETAIL_ID, PAYMENT_TYPE),
    FOREIGN KEY(INVOICE_ID) REFERENCES INVOICE(INVOICE_ID),
    CONSTRAINT UNIQUE_PAYMENT_DETAIL UNIQUE(INVOICE_ID, PAYMENT_TYPE)      
)
/
-- End of creating the PAYMENT_DETAIL table


-- Create the VISACARD_PAYMENT Table
CREATE TABLE VISACARD_PAYMENT
(   
    PAYMENT_ID              INT CHECK (PAYMENT_ID > 0),
    PAYMENT_DETAIL_ID       INT UNIQUE,
    PERSON_ADDRESS_LINK_ID  INT,
    PAYMENT_TYPE            VARCHAR2(11) DEFAULT 'VISA_CARD' CHECK(PAYMENT_TYPE IN ('VISA_CARD')),
    CARD_NUMBER             VARCHAR2(16) NOT NULL,   -- The card number cannot be set unique since this table is for the payment, not for the card.
    SECURITY_CODE           VARCHAR2(3) NOT NULL,
    START_DATE              DATE NOT NULL,
    EXPIRE_DATE             DATE NOT NULL,
    PRIMARY KEY(PAYMENT_ID),
    FOREIGN KEY(PAYMENT_DETAIL_ID, PAYMENT_TYPE) REFERENCES PAYMENT_DETAIL(PAYMENT_DETAIL_ID, PAYMENT_TYPE),
    FOREIGN KEY(PERSON_ADDRESS_LINK_ID) REFERENCES PERSON_ADDRESS_LINK(LINK_ID) 
)
/
-- End of creating the VISACARD_PAYMENT  table

-- Create the MASTERCARD_PAYMENT Table
 CREATE TABLE MASTERCARD_PAYMENT
(
    PAYMENT_ID             INT CHECK (PAYMENT_ID > 0),
    PAYMENT_DETAIL_ID      INT UNIQUE,
    PERSON_ADDRESS_LINK_ID INT,
    PAYMENT_TYPE           VARCHAR2(11) DEFAULT 'MASTER_CARD' CHECK(PAYMENT_TYPE IN ('MASTER_CARD')),
    CARD_NUMBER            VARCHAR2(16) NOT NULL,   -- The card number cannot be set unique since this table is for the payment, not for the card.
    SECURITY_CODE          VARCHAR2(3) NOT NULL,
    START_DATE             DATE NOT NULL,
    EXPIRE_DATE            DATE NOT NULL,
    PRIMARY KEY(PAYMENT_ID),
    FOREIGN KEY(PAYMENT_DETAIL_ID, PAYMENT_TYPE) REFERENCES PAYMENT_DETAIL(PAYMENT_DETAIL_ID, PAYMENT_TYPE),
    FOREIGN KEY(PERSON_ADDRESS_LINK_ID) REFERENCES PERSON_ADDRESS_LINK(LINK_ID) 
)
/
-- End of creation the MASTERCARD_PAYMENT table.

-- Create the AMEXCARD_PAYMENT Table.
 CREATE TABLE AMEXCARD_PAYMENT
(   
    PAYMENT_ID             INT CHECK (PAYMENT_ID > 0),
    PAYMENT_DETAIL_ID      INT UNIQUE,
    PERSON_ADDRESS_LINK_ID INT,
    PAYMENT_TYPE           VARCHAR2(11) DEFAULT 'AMEX_CARD' CHECK(PAYMENT_TYPE IN ('AMEX_CARD')),
    CARD_NUMBER            VARCHAR2(15) NOT NULL,   -- The card number cannot be set unique since this table is for the payment, not for the card.
    SECURITY_CODE          VARCHAR2(4) NOT NULL,
    EXPIRE_DATE            DATE NOT NULL,
    PRIMARY KEY (PAYMENT_ID),
    FOREIGN KEY(PAYMENT_DETAIL_ID, PAYMENT_TYPE) REFERENCES PAYMENT_DETAIL(PAYMENT_DETAIL_ID, PAYMENT_TYPE),
    FOREIGN KEY(PERSON_ADDRESS_LINK_ID) REFERENCES PERSON_ADDRESS_LINK(LINK_ID) 
)
/
-- End of creation of AMEXCARD_PAYMENT table.

-- Create the DEBITCARD_PAYMENT table.
CREATE TABLE DEBITCARD_PAYMENT
(
    PAYMENT_ID             INT CHECK (PAYMENT_ID > 0),
    PAYMENT_DETAIL_ID      INT UNIQUE,
    PERSON_ADDRESS_LINK_ID INT,
    PAYMENT_TYPE           VARCHAR2(11) DEFAULT 'DEBIT_CARD' CHECK(PAYMENT_TYPE IN ('DEBIT_CARD')),
    CARD_NUMBER            VARCHAR2(16) NOT NULL,   -- The card number cannot be set unique since this table is for the payment, not for the card.
    SECURITY_CODE          VARCHAR2(3) NOT NULL,
    ISSUE_NUMBER           INT,
    START_DATE             DATE NOT NULL,
    EXPIRE_DATE            DATE NOT NULL,
    PRIMARY KEY(PAYMENT_ID),
    FOREIGN KEY(PAYMENT_DETAIL_ID, PAYMENT_TYPE) REFERENCES PAYMENT_DETAIL(PAYMENT_DETAIL_ID, PAYMENT_TYPE),
    FOREIGN KEY(PERSON_ADDRESS_LINK_ID) REFERENCES PERSON_ADDRESS_LINK(LINK_ID) 
)
/
-- End of creation of DEBITCARD_PAYMENT table.


-- Create the PAYPAL_PAYMENT table.
CREATE TABLE PAYPAL_PAYMENT
(
    PAYMENT_ID            INT CHECK (PAYMENT_ID > 0),
    PAYMENT_DETAIL_ID     INT UNIQUE,
    PAYPAL_ACCOUNT_ID     VARCHAR2(100) NOT NULL,
    PAYMENT_TYPE          VARCHAR2(11) DEFAULT 'PAYPAL' CHECK(PAYMENT_TYPE IN ('PAYPAL')),
    PAYPAL_IDENTITY_TOKEN VARCHAR2(100) NOT NULL,   -- The identity token cannot be set unique since this table is for the payment, not for the paypal account.
    PRIMARY KEY(PAYMENT_ID),
    FOREIGN KEY(PAYMENT_DETAIL_ID, PAYMENT_TYPE) REFERENCES PAYMENT_DETAIL(PAYMENT_DETAIL_ID, PAYMENT_TYPE)
)
/
-- End of creation of PAYPAL_PAYMENT table.

-- Create the VOUCHER table.
CREATE TABLE VOUCHER
(
    VOUCHER_ID    INT CHECK(VOUCHER_ID > 0),
    CUSTOMER_ID   INT,
    VOUCHER_TOKEN VARCHAR2(19) NOT NULL UNIQUE,
    TOTAL         NUMBER(10, 2) NOT NULL,
    EXPIRE_DATE   DATE NOT NULL,
    PRIMARY KEY (VOUCHER_ID),
    FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID) 
)
/
-- End of the creation of VOUCHER table.

-- Create the VOUCHER_PAYMENT table.
CREATE TABLE VOUCHER_PAYMENT
(   
    PAYMENT_DETAIL_ID INT UNIQUE,    
    VOUCHER_ID        INT,
    PAYMENT_TYPE      VARCHAR2(11) DEFAULT 'VOUCHER' CHECK(PAYMENT_TYPE IN ('VOUCHER')),
    PRIMARY KEY (PAYMENT_DETAIL_ID, PAYMENT_TYPE, VOUCHER_ID),
    FOREIGN KEY(PAYMENT_DETAIL_ID, PAYMENT_TYPE) REFERENCES PAYMENT_DETAIL(PAYMENT_DETAIL_ID, PAYMENT_TYPE),
    FOREIGN KEY(VOUCHER_ID) REFERENCES VOUCHER(VOUCHER_ID)
)
/
-- End of the creation of VOUCHER_PAYMENT table.
-- End of part two.

-- Part III, Add extra constraints.
--CREATE OR REPLACE TRIGGER CUSTOMER_ADDRESS_TYPE_TRIG
--BEFORE INSERT OR UPDATE OF PERSON_ADDRESS_LINK_ID ON CUSTOMER
--FOR EACH ROW 
--   WHEN ((SELECT ADDRESS_TYPE FROM PERSON_ADDRESS_LINK WHERE ERSON_ADDRESS_LINK.ERSON_ADDRESS_LINK_ID = NEW.ERSON_ADDRESS_LINK_ID) >< 'CONTACT')
--DECLARE    
--   CUSTOMER_ADDRESS_XCEP EXCEPTION;
--   PRAGMA EXCEPTION_INIT(CUSTOMER_ADDRESS_XCEP, -20001 );
--BEGIN
--   RAISE CUSTOMER_ADDRESS_XCEP;
--END
--/

