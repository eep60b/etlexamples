/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.etlsolutions.examples.ha.pojo;
// Generated 10-Nov-2015 10:41:48 by Hibernate Tools 4.3.1

import com.etlsolutions.examples.data.api.Customer;
import com.etlsolutions.examples.data.api.Invoice;
import com.etlsolutions.examples.data.api.ShoppingCartItem;
import com.etlsolutions.examples.data.api.Voucher;
import com.etlsolutions.examples.data.api.Wishlist;
import com.etlsolutions.examples.data.spi.CustomerSpi;
import com.etlsolutions.examples.ha.control.QueryNames;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import org.hibernate.Hibernate;
import org.hibernate.annotations.NamedQueries;
import org.hibernate.annotations.NamedQuery;

/**
 * The CustomerPojo class is generated automatically then modified
 * manually.
 *
 * @author Zhipeng Chang
 *
 * @since 1.0.0
 *
 * @version 1.0.0 - Generated by NetBeans.
 * @version 1.1.0 - Added equals and hashCode methods.
 */
@Entity
@Table(name = "customer", schema = "public", uniqueConstraints = {
    @UniqueConstraint(columnNames = "person_address_link_id"),
    @UniqueConstraint(columnNames = "username")}
)
@NamedQueries({
    @NamedQuery(name = QueryNames.findCustomers, query = "from CustomerPojo")
})
public class CustomerPojo implements Serializable, CustomerSpi<PersonAddressLinkPojo> {

    private static final long serialVersionUID = 411287328647000143L;
    
    @Id
    @Column(name = "customer_id", unique = true, nullable = false)
    private int id;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "person_address_link_id", unique = true)
    private PersonAddressLinkPojo personAddressLink;
    
    @Column(name = "username", unique = true, nullable = false, length = 200)
    private String username;
    
    @Column(name = "password", nullable = false, length = 200)
    private String password;
    
    @Column(name = "image")
    private byte[] image;
    
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "customer")
    private Set<Invoice> invoices = new HashSet<>(20);
    
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "customer")
    private Set<Voucher> vouchers = new HashSet<>(3);
    
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "customer")
    private Set<Wishlist> wishlists = new HashSet<>(3);
    
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "customer")
    private Set<ShoppingCartItem> shoppingCarts = new HashSet<>(1);

    /**
     * 
     */
    public CustomerPojo() {
    }

    /**
     * 
     * @param id
     * @param personAddressLink
     * @param username
     * @param password 
     */
    public CustomerPojo(int id, PersonAddressLinkPojo personAddressLink, String username, String password) {
        this.id = id;
        this.personAddressLink = personAddressLink;
        this.username = username;
        this.password = password;
    }

    /**
     * 
     * @param id
     * @param personAddressLink
     * @param username
     * @param password
     * @param image
     * @param invoices
     * @param vouchers
     * @param wishlists
     * @param shoppingCarts 
     */
    public CustomerPojo(int id, PersonAddressLinkPojo personAddressLink, String username, String password, byte[] image, Set<Invoice> invoices, Set<Voucher> vouchers, Set<Wishlist> wishlists, Set<ShoppingCartItem> shoppingCarts) {
        this.id = id;
        this.personAddressLink = personAddressLink;
        this.username = username;
        this.password = password;
        this.image = image;
        this.invoices = invoices;
        this.vouchers = vouchers;
        this.wishlists = wishlists;
        this.shoppingCarts = shoppingCarts;
    }

    @Override
    public int getId() {
        return this.id;
    }

    @Override
    public void setId(int id) {
        this.id = id;
    }

    @Override
    public PersonAddressLinkPojo getPersonAddressLink() {
        return this.personAddressLink;
    }

    @Override
    public void setPersonAddressLink(PersonAddressLinkPojo personAddressLink) {
        this.personAddressLink = personAddressLink;
        id = personAddressLink.getId();
    }

    @Override
    public String getUsername() {
        return this.username;
    }

    @Override
    public void setUsername(String username) {
        this.username = username;
    }

    @Override
    public String getPassword() {
        return this.password;
    }

    @Override
    public void setPassword(String password) {
        this.password = password;
    }

    @Override
    public byte[] getImage() {
        return this.image;
    }

    @Override
    public void setImage(byte[] image) {
        this.image = image;
    }

    public Set<Invoice> getInvoices() {
        return this.invoices;
    }

    public void setInvoices(Set<Invoice> invoices) {
        this.invoices = invoices;
    }

    public Set<Voucher> getVouchers() {
        return this.vouchers;
    }

    public void setVouchers(Set<Voucher> vouchers) {
        this.vouchers = vouchers;
    }

    public Set<Wishlist> getWishlists() {
        return this.wishlists;
    }

    public void setWishlists(Set<Wishlist> wishlists) {
        this.wishlists = wishlists;
    }

    public Set<ShoppingCartItem> getShoppingCart() {
        return this.shoppingCarts;
    }

    public void setShoppingCart(Set<ShoppingCartItem> shoppingCarts) {
        this.shoppingCarts = shoppingCarts;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 13 * hash + this.id;
        return hash;
    }

    @Override
    @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        //This code should be kept to show a method to compare the class. 
        //For Hibernate directly comparison of the class names is no good since 
        //its children should be considered as equals when their IDs are the same. 
        if (Hibernate.getClass(this) != Hibernate.getClass(obj)) {
            return false;
        }

        final CustomerPojo other = (CustomerPojo) obj;
        return this.id == other.id;
    }

    @Override
    public boolean hasSameConstraint(Customer constraintable) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean hasSameParameters(Customer constraintable) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
