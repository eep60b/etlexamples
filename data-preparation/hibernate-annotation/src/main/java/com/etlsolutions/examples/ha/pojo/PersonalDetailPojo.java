/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.etlsolutions.examples.ha.pojo;
// Generated 10-Nov-2015 10:41:48 by Hibernate Tools 4.3.1

import com.etlsolutions.examples.data.api.Administrator;
import com.etlsolutions.examples.data.api.Author;
import com.etlsolutions.examples.data.api.Email;
import com.etlsolutions.examples.data.api.PersonAddressLink;
import com.etlsolutions.examples.data.api.PersonalDetail;
import com.etlsolutions.examples.data.api.Reviewer;
import com.etlsolutions.examples.data.api.Telephone;
import com.etlsolutions.examples.data.spi.PersonalDetailSpi;
import com.etlsolutions.examples.ha.control.QueryNames;
import java.io.Serializable;
import java.util.Date;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.Hibernate;
import org.hibernate.annotations.NamedQueries;
import org.hibernate.annotations.NamedQuery;

/**
 * The PersonalDetailPojo  class is generated automatically then modified manually.
 *
 * @author Zhipeng Chang
 * 
 * @since 1.0.0
 * 
 * @version 1.0.0 - generated by NetBeans.
 * @version 1.0.1 - Added implementation of Address.
 */
@Entity
@Table(name = "personal_detail", schema = "public")
@NamedQueries({
        @NamedQuery(name = QueryNames.findPersons, query = "from PersonalDetailPojo")
})
public class PersonalDetailPojo implements Serializable, PersonalDetailSpi {

    private static final long serialVersionUID = 72984945729826834L;    
    
    @Id
    @Column(name = "personal_detail_id", unique = true, nullable = false)
    private int id;
    
    @Column(name = "title", nullable = false, length = 40)
    private String title;
    
    @Column(name = "given_name", nullable = false, length = 200)
    private String givenName;
    
    @Column(name = "family_name", nullable = false, length = 200)
    private String familyName;
    
    @Temporal(TemporalType.DATE)
    @Column(name = "date_of_birth", nullable = false, length = 13)
    private Date dateOfBirth;
    
    @Column(name = "profile")
    private byte[] profile;
    
    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "person_telephone_link", schema = "public", joinColumns = {
        @JoinColumn(name = "personal_detail_id", nullable = false, updatable = false)}, inverseJoinColumns = {
        @JoinColumn(name = "telephone_id", nullable = false, updatable = false)})
    private Set<Telephone> telephones = new HashSet<>(0);
    
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "personalDetail")
    private Set<Administrator> administrators = new HashSet<>(1);
    
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "personalDetail")
    private Set<Email> emails = new HashSet<>(3);
    
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "personalDetail")
    private Set<PersonAddressLink> personAddressLinks = new HashSet<>(1);
    
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "personalDetail")
    private Set<Author> authors = new HashSet<>(1);
    
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "personalDetail")
    private Set<Reviewer> reviewers = new HashSet<>(1);

    public PersonalDetailPojo() {
    }

    public PersonalDetailPojo(int id, String title, String personGivenName, String personFamilyName) {
        this.id = id;
        this.title = title;
        this.givenName = personGivenName;
        this.familyName = personFamilyName;
    }

    public PersonalDetailPojo(int id, String title, String personGivenName, String personFamilyName, Date dateOfBirth, Set<PersonAddressLink> personAddressLinks, Set<Author> authors, Set<Telephone> telephones, Set<Email> emails) {
        this.id = id;
        this.title = title;
        this.givenName = personGivenName;
        this.familyName = personFamilyName;
        this.dateOfBirth = dateOfBirth;
        this.personAddressLinks = personAddressLinks;
        this.authors = authors;
        this.telephones = telephones;
        this.emails = emails;
    }

    @Override
    public int getId() {
        return this.id;
    }

    @Override
    public void setId(int id) {
        this.id = id;
    }

    @Override
    public String getTitle() {
        return this.title;
    }

    @Override
    public void setTitle(String title) {
        this.title = title;
    }

    @Override
    public String getGivenName() {
        return this.givenName;
    }

    @Override
    public void setGivenName(String personGivenName) {
        this.givenName = personGivenName;
    }

    @Override
    public String getFamilyName() {
        return this.familyName;
    }

    @Override
    public void setFamilyName(String personFamilyName) {
        this.familyName = personFamilyName;
    }

    @Override
    public Date getDateOfBirth() {
        return this.dateOfBirth;
    }

    @Override
    public void setDateOfBirth(Date dateOfBirth) {
        this.dateOfBirth = dateOfBirth;
    }


    public Set<PersonAddressLink> getPersonAddressLinks() {
        return this.personAddressLinks;
    }

    public void setPersonAddressLinks(Set<PersonAddressLink> personAddressLinks) {
        this.personAddressLinks = personAddressLinks;
    }

    public Set<Administrator> getAdministrators() {
        return administrators;
    }

    public void setAdministrators(Set<Administrator> administrators) {
        this.administrators = administrators;
    }

    public Set<Author> getAuthors() {
        return authors;
    }

    public void setAuthors(Set<Author> authors) {
        this.authors = authors;
    }

    public Set<Telephone> getTelephones() {
        return this.telephones;
    }

    public void setTelephones(Set<Telephone> telephones) {
        this.telephones = telephones;
    }

    public Set<Reviewer> getReviewers() {
        return reviewers;
    }

    public void setReviewers(Set<Reviewer> reviewers) {
        this.reviewers = reviewers;
    }

    public Set<Email> getEmails() {
        return this.emails;
    }

    public void setEmails(Set<Email> emails) {
        this.emails = emails;
    }

    @Override
    public int hashCode() {
        int hash = 5;
        hash = 41 * hash + this.id;
        return hash;
    }

    @Override
    @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
    public boolean equals(Object obj) {
        
        if (obj == null) {
            return false;
        }
        
        //This code should be kept to show a method to compare the class. 
        //For Hibernate directly comparison of the class names is no good since 
        //its children should be considered as equals when their IDs are the same. 
        if (Hibernate.getClass(this) != Hibernate.getClass(obj)) {
            return false;
        }
        
        final PersonalDetailPojo other = (PersonalDetailPojo) obj;
        return this.id == other.id;
    }

    @Override
    public void setProfile(byte[] profile) {
        this.profile = profile;
    }

    @Override
    public byte[] getProfile() {
        return profile;
    }

    @Override
    public boolean hasSameConstraint(PersonalDetail personalDetail) {
        return Objects.equals(getProfile(), personalDetail.getProfile());
    }

    @Override
    public boolean hasSameParameters(PersonalDetail personalDetail) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
