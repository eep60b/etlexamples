package com.etlsolutions.examples.ha.pojo;
// Generated 10-Nov-2015 10:41:48 by Hibernate Tools 4.3.1

import com.etlsolutions.examples.data.api.Author;
import com.etlsolutions.examples.data.api.Book;
import com.etlsolutions.examples.data.spi.AuthorSpi;
import com.etlsolutions.examples.ha.control.QueryNames;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import org.hibernate.Hibernate;
import org.hibernate.annotations.NamedQueries;
import org.hibernate.annotations.NamedQuery;

/**
 * the AuthorPojo class is generated automatically then modified manually.
 *
 * @author Zhipeng Chang
 *
 * @since 1.0.0
 *
 * @version 1.0.0 - generated by NetBeans.
 * @version 1.1.0 - Add equals and hashCode methods.
 * @version 2.0.0 - Add the named query "findAuthors".
 */
@Entity
@Table(name = "author", schema = "public", uniqueConstraints = @UniqueConstraint(columnNames = "personal_detail_id"))
@NamedQueries({
    @NamedQuery(name = QueryNames.findAuthors, query = "from AuthorPojo")
})
public class AuthorPojo implements Serializable, AuthorSpi<PersonalDetailPojo> {

    private static final long serialVersionUID = 478992041301871408L;
            
    @Id
    @Column(name = "author_id", unique = true, nullable = false)
    private int id;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "personal_detail_id", unique = true)
    private PersonalDetailPojo personalDetail;
    
    @Column(name = "image")
    private byte[] image;
    
    @Column(name = "biography")
    private byte[] biography;
    
    @Column(name = "webpage_url", length = 200)
    private String webpageUrl;
    
    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "author_book_link", schema = "public", joinColumns = {
        @JoinColumn(name = "author_id", nullable = false, updatable = false)}, inverseJoinColumns = {
        @JoinColumn(name = "book_id", nullable = false, updatable = false)})
    private Set<Book> books = new HashSet<>(5);

    public AuthorPojo() {
    }

    public AuthorPojo(PersonalDetailPojo personalDetail) {
        this.personalDetail = personalDetail;
    }

    public AuthorPojo(PersonalDetailPojo personalDetail, byte[] image, byte[] biography, String webpageUrl, Set books) {
        this.personalDetail = personalDetail;
        this.image = image;
        this.biography = biography;
        this.webpageUrl = webpageUrl;
        this.books = books;
    }

    @Override
    public int getId() {
        return this.id;
    }

    @Override
    public void setId(int id) {
        this.id = id;
    }

    @Override
    public PersonalDetailPojo getPersonalDetail() {
        return personalDetail;
    }

    @Override
    public void setPersonalDetail(PersonalDetailPojo personalDetail) {
        this.personalDetail = personalDetail;
    }

    @Override
    public byte[] getImage() {
        return this.image;
    }

    @Override
    public void setImage(byte[] image) {
        this.image = image;
    }

    @Override
    public byte[] getBiography() {
        return this.biography;
    }

    @Override
    public void setBiography(byte[] biography) {
        this.biography = biography;
    }

    @Override
    public String getWebpageUrl() {
        return this.webpageUrl;
    }

    @Override
    public void setWebpageUrl(String webpageUrl) {
        this.webpageUrl = webpageUrl;
    }

    public Set<Book> getBooks() {
        return this.books;
    }

    public void setBooks(Set<Book> books) {
        this.books = books;
    }

    @Override
    public int hashCode() {
        int hash = 3;
        hash = 37 * hash + this.id;
        return hash;
    }

    @Override
    @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        //This code should be kept to show a method to compare the class. 
        //For Hibernate directly comparison of the class names is no good since 
        //its children should be considered as equals when their IDs are the same. 
        if (Hibernate.getClass(this) != Hibernate.getClass(obj)) {
            return false;
        }

        final AuthorPojo other = (AuthorPojo) obj;
        return this.id == other.id;
    }

    @Override
    public boolean hasSameConstraint(Author constraintable) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean hasSameParameters(Author constraintable) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
