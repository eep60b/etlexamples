/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.etlsolutions.examples.ha.pojo;
// Generated 10-Nov-2015 10:41:48 by Hibernate Tools 4.3.1

import com.etlsolutions.examples.data.api.AmexcardPayment;
import com.etlsolutions.examples.data.api.CurrencyCode;
import com.etlsolutions.examples.data.api.DebitcardPayment;
import com.etlsolutions.examples.data.api.MastercardPayment;
import com.etlsolutions.examples.data.api.PaymentDetail;
import com.etlsolutions.examples.data.api.PaymentType;
import com.etlsolutions.examples.data.api.PaypalPayment;
import com.etlsolutions.examples.data.api.VisacardPayment;
import com.etlsolutions.examples.data.api.Voucher;
import com.etlsolutions.examples.data.spi.PaymentDetailSpi;
import com.etlsolutions.examples.ha.control.QueryNames;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import org.hibernate.Hibernate;
import org.hibernate.annotations.NamedQueries;
import org.hibernate.annotations.NamedQuery;

/**
 * The PaymentDetailPojo class is generated automatically then modified
 * manually.
 *
 * @author Zhipeng Chang
 *
 * @since 1.0.0
 * @version 1.0.0 - generated by NetBeans.
 * @version 1.0.1 - Add the implementation of Address.
 * @version 1.1.0 - Add the equals and hashCode methods.
 */
@Entity
@Table(name = "payment_detail", schema = "public", uniqueConstraints = @UniqueConstraint(columnNames = "payment_detail_id"))
@NamedQueries({
    @NamedQuery(name = QueryNames.findPaymentDetails, query = "from PaymentDetailPojo")
})
public class PaymentDetailPojo implements Serializable, PaymentDetailSpi<InvoicePojo> {

    private static final long serialVersionUID = 348748366339802929L;

    @EmbeddedId
    @AttributeOverrides({
        @AttributeOverride(name = "paymentDetailId", column = @Column(name = "payment_detail_id", unique = true, nullable = false)),
        @AttributeOverride(name = "paymentType", column = @Column(name = "payment_type", nullable = false, length = 11))})
    private PaymentDetailIdPojo idObject;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "invoice_id")
    private InvoicePojo invoice;
    
    @Column(name = "subtotal", nullable = false, precision = 10)
    private BigDecimal subtotal;
   
    @Enumerated(EnumType.STRING)    
    @Column(name = "currency_code", nullable = false, length = 3)
    private CurrencyCode currencyCode;
    
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "paymentDetail")
    private Set<AmexcardPayment> amexcardPayments = new HashSet<>(0);
    
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "paymentDetail")
    private Set<PaypalPayment> paypalPayments = new HashSet<>(0);
    
    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "voucher_payment", schema = "public", uniqueConstraints = @UniqueConstraint(columnNames = "payment_detail_id"), joinColumns = {
        @JoinColumn(name = "payment_detail_id", unique = true, nullable = false, updatable = false),
        @JoinColumn(name = "payment_type", nullable = false, updatable = false)}, inverseJoinColumns = {
        @JoinColumn(name = "voucher_id", nullable = false, updatable = false)})
    private Set<Voucher> vouchers = new HashSet<>(0);
    
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "paymentDetail")
    private Set<VisacardPayment> visacardPayments = new HashSet<>(0);
    
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "paymentDetail")
    private Set<MastercardPayment> mastercardPayments = new HashSet<>(0);
    
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "paymentDetail")
    private Set<DebitcardPayment> debitcardPayments = new HashSet<>(0);
    
    /**
     * Construct a default object with no fields initialised.
     */
    public PaymentDetailPojo() {
    }

    /**
     *
     * @param idObject
     * @param subtotal
     * @param currencyCode
     */
    public PaymentDetailPojo(PaymentDetailIdPojo idObject, BigDecimal subtotal, CurrencyCode currencyCode) {
        this.idObject = idObject;
        this.subtotal = subtotal;
        this.currencyCode = currencyCode;
    }

    /**
     *
     * @param idObject
     * @param invoice
     * @param subtotal
     * @param currencyCode
     * @param mastercardPayments
     * @param debitcardPayments
     * @param visacardPayments
     * @param paypalPayments
     * @param vouchers
     * @param amexcardPayments
     */
    public PaymentDetailPojo(PaymentDetailIdPojo idObject, InvoicePojo invoice, BigDecimal subtotal, CurrencyCode currencyCode,
            Set<MastercardPayment> mastercardPayments, Set<DebitcardPayment> debitcardPayments,
            Set<VisacardPayment> visacardPayments, Set<PaypalPayment> paypalPayments,
            Set<Voucher> vouchers, Set<AmexcardPayment> amexcardPayments) {

        this.idObject = idObject;
        this.invoice = invoice;
        this.subtotal = subtotal;
        this.currencyCode = currencyCode;
        this.mastercardPayments = mastercardPayments;
        this.debitcardPayments = debitcardPayments;
        this.visacardPayments = visacardPayments;
        this.paypalPayments = paypalPayments;
        this.vouchers = vouchers;
        this.amexcardPayments = amexcardPayments;
    }

    public PaymentDetailIdPojo getIdObject() {
        return this.idObject;
    }

    public void setIdObject(PaymentDetailIdPojo idObject) {
        this.idObject = idObject;
    }

    @Override
    public InvoicePojo getInvoice() {
        return this.invoice;
    }

    @Override
    public void setInvoice(InvoicePojo invoice) {
        this.invoice = invoice;
    }

    @Override
    public BigDecimal getSubtotal() {
        return subtotal;
    }

    @Override
    public void setSubtotal(BigDecimal subtotal) {
        this.subtotal = subtotal;
    }

    @Override
    public CurrencyCode getCurrencyCode() {
        return this.currencyCode;
    }

    @Override
    public void setCurrencyCode(CurrencyCode currencyCode) {
        this.currencyCode = currencyCode;
    }

    public Set<MastercardPayment> getMastercardPayments() {
        return this.mastercardPayments;
    }

    public void setMastercardPayments(Set<MastercardPayment> mastercardPayments) {
        this.mastercardPayments = mastercardPayments;
    }

    public Set<DebitcardPayment> getDebitcardPayments() {
        return this.debitcardPayments;
    }

    public void setDebitcardPayments(Set<DebitcardPayment> debitcardPayments) {
        this.debitcardPayments = debitcardPayments;
    }

    public Set<VisacardPayment> getVisacardPayments() {
        return this.visacardPayments;
    }

    public void setVisacardPayments(Set<VisacardPayment> visacardPayments) {
        this.visacardPayments = visacardPayments;
    }

    public Set<PaypalPayment> getPaypalPayments() {
        return this.paypalPayments;
    }

    public void setPaypalPayments(Set<PaypalPayment> paypalPayments) {
        this.paypalPayments = paypalPayments;
    }

    public Set<Voucher> getVouchers() {
        return vouchers;
    }

    public void setVouchers(Set<Voucher> vouchers) {
        this.vouchers = vouchers;
    }

    public Set<AmexcardPayment> getAmexcardPayments() {
        return this.amexcardPayments;
    }

    public void setAmexcardPayments(Set<AmexcardPayment> amexcardPayments) {
        this.amexcardPayments = amexcardPayments;
    }

    @Override
    public PaymentType getPaymentType() {
        if (idObject == null) {
            return null;
        }
        return idObject.getPaymentType();
    }

    @Override
    public void setPaymentType(PaymentType paymentType) {

        if (idObject == null) {
            idObject = new PaymentDetailIdPojo();
        }

        idObject.setPaymentType(paymentType);
    }

    @Override
    public int getId() {
        if (idObject == null) {
            return 0;
        }
        return idObject.getId();
    }

    @Override
    public void setId(int id) {
        if (idObject == null) {
            idObject = new PaymentDetailIdPojo();
        }
        idObject.setId(id);
    }

    @Override
    public int hashCode() {
        int hash = 3;
        hash = 73 * hash + Objects.hashCode(this.idObject);
        return hash;
    }

    @Override
    @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
    public boolean equals(Object obj) {

        if (obj == null) {
            return false;
        }

        //This code should be kept to show a method to compare the class. 
        //For Hibernate directly comparison of the class names is no good since 
        //its children should be considered as equals when their IDs are the same. 
        if (Hibernate.getClass(this) != Hibernate.getClass(obj)) {
            return false;
        }

        final PaymentDetailPojo other = (PaymentDetailPojo) obj;
        return Objects.equals(this.idObject, other.idObject);
    }

    @Override
    public boolean hasSameConstraint(PaymentDetail constraintable) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean hasSameParameters(PaymentDetail constraintable) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
