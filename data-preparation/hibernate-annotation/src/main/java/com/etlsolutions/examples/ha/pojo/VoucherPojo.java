/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.etlsolutions.examples.ha.pojo;
// Generated 10-Nov-2015 10:41:48 by Hibernate Tools 4.3.1

import com.etlsolutions.examples.data.api.Voucher;
import com.etlsolutions.examples.data.spi.VoucherSpi;
import com.etlsolutions.examples.ha.control.QueryNames;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;
import org.hibernate.annotations.NamedQueries;
import org.hibernate.annotations.NamedQuery;

/**
 * The VoucherPojo class is generated automatically then modified manually.
 *
 * @author Zhipeng Chang
 * 
 * @since 1.0.0
 * 
 * @version 1.0.0 - generated by NetBeans.
 * @version 1.0.1 - Add the implementation of VoucherSpi.
 */
@Entity
@Table(name = "voucher", schema = "public", uniqueConstraints = @UniqueConstraint(columnNames = "voucher_token"))
@NamedQueries({
        @NamedQuery(name = QueryNames.findVouchers, query = "from VoucherPojo")
})
public class VoucherPojo implements Serializable, VoucherSpi<CustomerPojo> {

    @Id
    @Column(name = "voucher_id", unique = true, nullable = false)
    private int id;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "customer_id")
    private CustomerPojo customer;
    
    @Column(name = "voucher_token", unique = true, nullable = false, length = 19)
    private String voucherToken;
    
    @Column(name = "total", nullable = false, precision = 10)
    private BigDecimal total;
    
    @Temporal(TemporalType.DATE)
    @Column(name = "expire_date", nullable = false, length = 13)
    private Date expireDate;  
    
    @ManyToMany(fetch = FetchType.LAZY, mappedBy = "vouchers")
    private Set<PaymentDetailPojo> paymentDetails = new HashSet<>(3);

    /**
     * 
     */
    public VoucherPojo() {
    }

    /**
     * 
     * @param id
     * @param voucherToken
     * @param total 
     */
    public VoucherPojo(int id, String voucherToken, BigDecimal total) {
        this.id = id;
        this.voucherToken = voucherToken;
        this.total = total;
    }

    public VoucherPojo(int id, CustomerPojo customer, String voucherToken, BigDecimal total, Set<PaymentDetailPojo> paymentDetails) {
        this.id = id;
        this.customer = customer;
        this.voucherToken = voucherToken;
        this.total = total;
        this.paymentDetails = paymentDetails;
    }

    @Override
    public int getId() {
        return this.id;
    }

    @Override
    public BigDecimal getTotal() {
        return total;
    }

    @Override
    public void setTotal(BigDecimal total) {
        this.total = total;
    }

    @Override
    public void setId(int id) {
        this.id = id;
    }

    @Override
    public CustomerPojo getCustomer() {
        return this.customer;
    }

    @Override
    public void setCustomer(CustomerPojo customer) {
        this.customer = customer;
    }

    @Override
    public String getVoucherToken() {
        return this.voucherToken;
    }

    @Override
    public void setVoucherToken(String voucherToken) {
        this.voucherToken = voucherToken;
    }

    @Override
    public void setExpireDate(Date expireDate) {
        this.expireDate = expireDate;
    }

    @Override
    public Date getExpireDate() {
        return expireDate;
    }    
    
    
    public Set<PaymentDetailPojo> getPaymentDetails() {
        return paymentDetails;
    }

    public void setPaymentDetails(Set<PaymentDetailPojo> paymentDetails) {
        this.paymentDetails = paymentDetails;
    } 

    @Override
    public boolean hasSameConstraint(Voucher voucher) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean hasSameParameters(Voucher voucher) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 23 * hash + this.id;
        hash = 23 * hash + Objects.hashCode(this.customer);
        hash = 23 * hash + Objects.hashCode(this.voucherToken);
        hash = 23 * hash + Objects.hashCode(this.total);
        hash = 23 * hash + Objects.hashCode(this.expireDate);
        hash = 23 * hash + Objects.hashCode(this.paymentDetails);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final VoucherPojo other = (VoucherPojo) obj;
        if (this.id != other.id) {
            return false;
        }
        if (!Objects.equals(this.customer, other.customer)) {
            return false;
        }
        if (!Objects.equals(this.voucherToken, other.voucherToken)) {
            return false;
        }
        if (!Objects.equals(this.total, other.total)) {
            return false;
        }
        if (!Objects.equals(this.expireDate, other.expireDate)) {
            return false;
        }
        if (!Objects.equals(this.paymentDetails, other.paymentDetails)) {
            return false;
        }
        return true;
    }
    
    
}
