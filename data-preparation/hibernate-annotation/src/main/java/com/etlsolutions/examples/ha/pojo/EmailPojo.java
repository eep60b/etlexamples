/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.etlsolutions.examples.ha.pojo;
// Generated 10-Nov-2015 10:41:48 by Hibernate Tools 4.3.1

import com.etlsolutions.examples.data.api.Email;
import com.etlsolutions.examples.data.spi.EmailSpi;
import com.etlsolutions.examples.ha.control.QueryNames;
import java.io.Serializable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import org.hibernate.Hibernate;
import org.hibernate.annotations.NamedQueries;
import org.hibernate.annotations.NamedQuery;

/**
 * The EmailPojo class is generated automatically then modified manually.
 *
 * @author Zhipeng Chang
 * 
 * @since 1.0.0
 * 
 * @version 1.0.0 - Generated by NetBeans.
 * @version 1.1.0 - Added equals and hashCode methods.
 */
@Entity
@Table(name = "email", schema = "public", uniqueConstraints = @UniqueConstraint(columnNames = "email_address"))
@NamedQueries({
        @NamedQuery(name = QueryNames.findEmails, query = "from EmailPojo")
})
public class EmailPojo implements Serializable, EmailSpi<PersonalDetailPojo> {

    private static final long serialVersionUID = 896059214430119830L;
    
    @Id
    @Column(name = "email_id", unique = true, nullable = false)
    private int id;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "personal_detail_id")
    private PersonalDetailPojo personalDetail;
    
    @Column(name = "email_address", unique = true, nullable = false, length = 200)
    private String emailAddress;
    
    public EmailPojo() {
    }

    public EmailPojo(int id, String emailAddress) {
        this.id = id;
        this.emailAddress = emailAddress;
    }

    public EmailPojo(int id, PersonalDetailPojo personalDetail, String emailAddress) {
        this.id = id;
        this.personalDetail = personalDetail;
        this.emailAddress = emailAddress;
    }

    @Override
    public int getId() {
        return this.id;
    }

    @Override
    public void setId(int id) {
        this.id = id;
    }

    @Override
    public PersonalDetailPojo getPersonalDetail() {
        return this.personalDetail;
    }

    @Override
    public void setPersonalDetail(PersonalDetailPojo personalDetail) {
        this.personalDetail = personalDetail;
    }

    @Override
    public String getEmailAddress() {
        return this.emailAddress;
    }

    @Override
    public void setEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + this.id;
        return hash;
    }

    @Override
    @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        
        //This code should be kept to show a method to compare the class. 
        //For Hibernate directly comparison of the class names is no good since 
        //its children should be considered as equals when their IDs are the same. 
        if (Hibernate.getClass(this) != Hibernate.getClass(obj)) {
            return false;
        }
        
        final EmailPojo other = (EmailPojo) obj;
        return this.id == other.id;
    }    

    @Override
    public boolean hasSameConstraint(Email constraintable) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean hasSameParameters(Email constraintable) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
