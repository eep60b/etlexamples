/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.etlsolutions.examples.ha.pojo;
// Generated 28-Nov-2015 11:36:09 by Hibernate Tools 4.3.1

import com.etlsolutions.examples.data.api.AvailabilityType;
import com.etlsolutions.examples.data.api.CurrencyCode;
import com.etlsolutions.examples.data.api.ItemCommonDetail;
import com.etlsolutions.examples.data.spi.ItemCommonDetailSpi;
import com.etlsolutions.examples.ha.control.QueryNames;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import org.hibernate.annotations.NamedQueries;
import org.hibernate.annotations.NamedQuery;

/**
 * The ItemCommonDetailPojo class is generated automatically then modified manually.
 *
 * @author Zhipeng Chang
 *
 * @since 1.0.0
 * 
 * @version 1.0.0 - generated by NetBeans.
 * @version 1.0.1 - Added implementation of Address.
 */
@Entity
@Table(name = "item_common_detail", schema = "public", uniqueConstraints = @UniqueConstraint(columnNames = "barcode"))
@NamedQueries({
        @NamedQuery(name = QueryNames.findItemDetails, query = "from ItemCommonDetailPojo")
})
public class ItemCommonDetailPojo implements Serializable, ItemCommonDetailSpi {

    @Id
    @Column(name = "item_common_detail_id", unique = true, nullable = false)
    private int id;
    
    @Column(name = "item_name", nullable = false, length = 600)
    private String name;
    
    @Column(name = "image")
    private byte[] image;
    
    @Column(name = "list_price", nullable = false, precision = 10)
    private BigDecimal listPrice;
    
    @Column(name = "sale_price", nullable = false, precision = 10)
    private BigDecimal salePrice;
    
    @Enumerated(EnumType.STRING)    
    @Column(name = "currency_code", nullable = false, length = 3)
    private CurrencyCode currencyCode;
    
    @Column(name = "ranking", nullable = false)
    private int ranking;
    
    @Column(name = "description", length = 4000)
    private String description;
    
    @Enumerated(EnumType.STRING)    
    @Column(name = "availability", nullable = false, length = 20)
    private AvailabilityType availability;
    
    @Column(name = "availability_number")
    private Integer availabilityNumber;
    
    @Column(name = "barcode", unique = true, nullable = false, length = 100)
    private String barcode;
    
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "itemCommonDetail")
    private Set<ShoppingCartItemPojo> shoppingCart = new HashSet<>(1);
    
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "itemCommonDetail")
    private Set<BookPojo> books = new HashSet<>(1);
    
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "itemCommonDetail")
    private Set<ReviewPojo> reviews = new HashSet<>(20);    
 
    @ManyToMany(fetch = FetchType.LAZY, mappedBy = "itemCommonDetails")
    private Set<WishlistPojo> wishlists = new HashSet<>(3);
        
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "itemCommonDetail")
    private Set<SoldItemPojo> soldItems = new HashSet<>(1);
    
    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "item_category_link", schema = "public", joinColumns = {
        @JoinColumn(name = "item_common_detail_id", nullable = false, updatable = false)}, inverseJoinColumns = {
        @JoinColumn(name = "category_id", nullable = false, updatable = false)})
    private Set<CategoryPojo> categories = new HashSet<>(2);

    /**
     * Construct a default object with no fields initialised.
     */
    public ItemCommonDetailPojo() {
    }

    /**
     * 
     * @param id
     * @param name
     * @param listPrice
     * @param salePrice
     * @param currencyCode
     * @param availability 
     */
    public ItemCommonDetailPojo(int id, String name, BigDecimal listPrice, BigDecimal salePrice, CurrencyCode currencyCode, AvailabilityType availability) {
        this.id = id;
        this.name = name;
        this.listPrice = listPrice;
        this.salePrice = salePrice;
        this.currencyCode = currencyCode;
        this.availability = availability;
    }

    /**
     * 
     * @param id
     * @param name
     * @param image
     * @param listPrice
     * @param salePrice
     * @param currencyCode
     * @param ranking
     * @param description
     * @param availability
     * @param availabilityNumber
     * @param soldItems
     * @param reviews
     * @param wishlists
     * @param books
     * @param shoppingCart
     * @param categories 
     */
    public ItemCommonDetailPojo(int id, String name, byte[] image, BigDecimal listPrice, BigDecimal salePrice,
            CurrencyCode currencyCode, Integer ranking, String description, AvailabilityType availability,
            Integer availabilityNumber, Set<SoldItemPojo> soldItems, Set<ReviewPojo> reviews,
            Set<WishlistPojo> wishlists, Set<BookPojo> books, Set<ShoppingCartItemPojo> shoppingCart, Set<CategoryPojo> categories) {
        this.id = id;
        this.name = name;
        this.image = image;
        this.listPrice = listPrice;
        this.salePrice = salePrice;
        this.currencyCode = currencyCode;
        this.ranking = ranking;
        this.description = description;
        this.availability = availability;
        this.availabilityNumber = availabilityNumber;
        this.soldItems = soldItems;
        this.reviews = reviews;
        this.wishlists = wishlists;
        this.books = books;
        this.shoppingCart = shoppingCart;
        this.categories = categories;
    }

    @Override
    public int getId() {
        return this.id;
    }

    @Override
    public void setId(int id) {
        this.id = id;
    }

    @Override
    public String getName() {
        return this.name;
    }

    @Override
    public void setName(String name) {
        this.name = name;
    }

    @Override
    public byte[] getImage() {
        return this.image;
    }

    @Override
    public void setImage(byte[] image) {
        this.image = image;
    }

    @Override
    public BigDecimal getListPrice() {
        return this.listPrice;
    }

    @Override
    public void setListPrice(BigDecimal listPrice) {
        this.listPrice = listPrice;
    }

    @Override
    public BigDecimal getSalePrice() {
        return this.salePrice;
    }

    @Override
    public void setSalePrice(BigDecimal salePrice) {
        this.salePrice = salePrice;
    }

    @Override
    public CurrencyCode getCurrencyCode() {
        return this.currencyCode;
    }

    @Override
    public void setCurrencyCode(CurrencyCode currencyCode) {
        this.currencyCode = currencyCode;
    }

    @Override
    public int getRanking() {
        return this.ranking;
    }

    @Override
    public void setRanking(int ranking) {
        this.ranking = ranking;
    }

    @Override
    public String getDescription() {
        return this.description;
    }

    @Override
    public void setDescription(String description) {
        this.description = description;
    }

    @Override
    public AvailabilityType getAvailability() {
        return this.availability;
    }

    @Override
    public void setAvailability(AvailabilityType availability) {
        this.availability = availability;
    }

    @Override
    public int getAvailabilityNumber() {
        return this.availabilityNumber;
    }

    @Override
    public void setAvailabilityNumber(int availabilityNumber) {
        this.availabilityNumber = availabilityNumber;
    }

    public Set<SoldItemPojo> getSoldItems() {
        return soldItems;
    }

    public void setSoldItems(Set<SoldItemPojo> soldItems) {
        this.soldItems = soldItems;
    }

    public Set<ReviewPojo> getReviews() {
        return this.reviews;
    }

    public void setReviews(Set<ReviewPojo> reviews) {
        this.reviews = reviews;
    }

    public Set<WishlistPojo> getWishlists() {
        return this.wishlists;
    }

    public void setWishlists(Set<WishlistPojo> wishlists) {
        this.wishlists = wishlists;
    }

    public Set<BookPojo> getBooks() {
        return this.books;
    }

    public void setBooks(Set<BookPojo> books) {
        this.books = books;
    }

    public Set<ShoppingCartItemPojo> getShoppingCart() {
        return this.shoppingCart;
    }

    public void setShoppingCart(Set<ShoppingCartItemPojo> shoppingCart) {
        this.shoppingCart = shoppingCart;
    }

    public Set<CategoryPojo> getCategories() {
        return this.categories;
    }

    public void setCategories(Set<CategoryPojo> categories) {
        this.categories = categories;
    }

    @Override
    public void setBarcode(String barcode) {
        this.barcode = barcode;
    }

    @Override
    public String getBarcode() {
        return barcode;
    }

    @Override
    public boolean hasSameConstraint(ItemCommonDetail itemCommonDetail) {
        return itemCommonDetail == null ? false : Objects.equals(getBarcode(), itemCommonDetail.getBarcode());
    }

    @Override
    public boolean hasSameParameters(ItemCommonDetail constraintable) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 89 * hash + this.id;
        hash = 89 * hash + Objects.hashCode(this.name);
        hash = 89 * hash + Arrays.hashCode(this.image);
        hash = 89 * hash + Objects.hashCode(this.listPrice);
        hash = 89 * hash + Objects.hashCode(this.salePrice);
        hash = 89 * hash + Objects.hashCode(this.currencyCode);
        hash = 89 * hash + this.ranking;
        hash = 89 * hash + Objects.hashCode(this.description);
        hash = 89 * hash + Objects.hashCode(this.availability);
        hash = 89 * hash + Objects.hashCode(this.availabilityNumber);
        hash = 89 * hash + Objects.hashCode(this.barcode);
        hash = 89 * hash + Objects.hashCode(this.shoppingCart);
        hash = 89 * hash + Objects.hashCode(this.books);
        hash = 89 * hash + Objects.hashCode(this.reviews);
        hash = 89 * hash + Objects.hashCode(this.wishlists);
        hash = 89 * hash + Objects.hashCode(this.soldItems);
        hash = 89 * hash + Objects.hashCode(this.categories);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final ItemCommonDetailPojo other = (ItemCommonDetailPojo) obj;
        if (this.id != other.id) {
            return false;
        }
        if (!Objects.equals(this.name, other.name)) {
            return false;
        }
        if (!Arrays.equals(this.image, other.image)) {
            return false;
        }
        if (!Objects.equals(this.listPrice, other.listPrice)) {
            return false;
        }
        if (!Objects.equals(this.salePrice, other.salePrice)) {
            return false;
        }
        if (this.currencyCode != other.currencyCode) {
            return false;
        }
        if (this.ranking != other.ranking) {
            return false;
        }
        if (!Objects.equals(this.description, other.description)) {
            return false;
        }
        if (this.availability != other.availability) {
            return false;
        }
        if (!Objects.equals(this.availabilityNumber, other.availabilityNumber)) {
            return false;
        }
        if (!Objects.equals(this.barcode, other.barcode)) {
            return false;
        }
        if (!Objects.equals(this.shoppingCart, other.shoppingCart)) {
            return false;
        }
        if (!Objects.equals(this.books, other.books)) {
            return false;
        }
        if (!Objects.equals(this.reviews, other.reviews)) {
            return false;
        }
        if (!Objects.equals(this.wishlists, other.wishlists)) {
            return false;
        }
        if (!Objects.equals(this.soldItems, other.soldItems)) {
            return false;
        }
        return Objects.equals(this.categories, other.categories);
    } 
}
