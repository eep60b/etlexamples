/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.etlsolutions.examples.ha.pojo;
// Generated 10-Nov-2015 10:41:48 by Hibernate Tools 4.3.1

import com.etlsolutions.examples.data.api.Category;
import com.etlsolutions.examples.data.api.ItemCommonDetail;
import com.etlsolutions.examples.data.spi.CategorySpi;
import com.etlsolutions.examples.ha.control.QueryNames;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import org.hibernate.annotations.NamedQueries;
import org.hibernate.annotations.NamedQuery;

/**
 * The CategoryPojo class generated automatically then modified manually.
 * 
 * @author Zhipeng Chang
 * 
 * @since 1.0.0
 * 
 * @version 1.0.0 - Generated by NetBeans.
 * @version 1.0.1 - Add implementation of the Category interface.
 * @version 1.1.0 - Add equals and hashCode methods. Add NamedQuery "findCategories".
 * 
 */

/**
 * The CategoryPojo class generated automatically then modified manually.
 * @author Zhipeng Chang
 * @since 1.0.0
 * @version 1.0.0 - Generated by NetBeans.
 * @version 1.0.1 - Add implementation of the CategorySpi interface.
 * @version 1.1.0 - Add equals and hashCode methods. Add NamedQuery "findCategories".
 */
@Entity
@Table(name = "category", schema = "public", uniqueConstraints = @UniqueConstraint(columnNames = "category_name"))
@NamedQueries({
        @NamedQuery(name = QueryNames.findCategories, query = "from CategoryPojo")
})
public class CategoryPojo implements Serializable, CategorySpi {

    private static final long serialVersionUID = 398586919480855952L;
    
    @Id
    @Column(name = "category_id", unique = true, nullable = false)
    private int id;
    
    @Column(name = "category_name", unique = true, nullable = false, length = 100)
    private String name;
    
    @ManyToMany(fetch = FetchType.LAZY, mappedBy = "categories")
    private Set<ItemCommonDetail> itemCommonDetails = new HashSet<>(20);
    
    public CategoryPojo() {
    }

    public CategoryPojo(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public CategoryPojo(int id, String name, Set<ItemCommonDetail> itemCommonDetails) {
        this.id = id;
        this.name = name;
        this.itemCommonDetails = itemCommonDetails;
    }

    @Override
    public int getId() {
        return this.id;
    }

    @Override
    public void setId(int id) {
        this.id = id;
    }

    @Override
    public String getName() {
        return this.name;
    }

    @Override
    public void setName(String name) {
        this.name = name;
    }

    public Set<ItemCommonDetail> getItemCommonDetails() {
        return this.itemCommonDetails;
    }

    public void setItemCommonDetails(Set<ItemCommonDetail> itemCommonDetails) {
        this.itemCommonDetails = itemCommonDetails;
    }

    @Override
    public int hashCode() {
        int hash = 5;
        hash = 89 * hash + this.id;
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final CategoryPojo other = (CategoryPojo) obj;
        return this.id == other.id;
    }

    @Override
    public boolean hasSameConstraint(Category constraintable) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean hasSameParameters(Category constraintable) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
