/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.etlsolutions.examples.ha.pojo;
// Generated 10-Nov-2015 10:41:48 by Hibernate Tools 4.3.1

import com.etlsolutions.examples.data.api.Author;
import com.etlsolutions.examples.data.api.Book;
import com.etlsolutions.examples.data.api.BookFormat;
import com.etlsolutions.examples.data.api.LanguageCode;
import com.etlsolutions.examples.data.api.UOM;
import com.etlsolutions.examples.data.spi.BookSpi;
import com.etlsolutions.examples.ha.control.QueryNames;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;
import org.hibernate.Hibernate;
import org.hibernate.annotations.NamedQueries;
import org.hibernate.annotations.NamedQuery;

/**
 * The BookPojo class is generated automatically then modified manually.
 *
 * @author Zhipeng Chang
 *
 * @since 1.0.0
 *
 * @version 1.0.0 - Generated by NetBeans.
 * @version 1.1.0 - Add equals and hashCode methods.
 * @version 2.0.0 - Add named query "findBooks".
 */
@Entity
@Table(name = "book", schema = "public", uniqueConstraints = {
    @UniqueConstraint(columnNames = "book_isbn"),
    @UniqueConstraint(columnNames = "item_common_detail_id")}
)
@NamedQueries({
    @NamedQuery(name = QueryNames.findBooks, query = "from BookPojo")
})
public class BookPojo implements Serializable, BookSpi<ItemCommonDetailPojo, PublisherPojo> {

    private static final long serialVersionUID = 364017648855994357L;

    @Id
    @Column(name = "book_id", unique = true, nullable = false)
    private int id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "item_common_detail_id", unique = true)
    private ItemCommonDetailPojo itemCommonDetail;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "publisher_id")
    private PublisherPojo publisher;

    @Column(name = "book_isbn", unique = true, nullable = false, length = 13)
    private String bookIsbn;

    @Column(name = "book_pdf_content")
    private byte[] bookPdfContent;

    @Column(name = "book_edition", nullable = false)
    private int bookEdition;

    @Temporal(TemporalType.DATE)
    @Column(name = "publish_date", length = 13)
    private Date publishDate;

    @Column(name = "book_width", precision = 4, scale = 1)
    private BigDecimal bookWidth;

    @Column(name = "book_length", precision = 4, scale = 1)
    private BigDecimal bookLength;

    @Column(name = "book_thickness", precision = 4, scale = 1)
    private BigDecimal bookThickness;

    @Enumerated(EnumType.STRING)
    @Column(name = "dimension_unit", nullable = false, length = 10)
    private UOM uom;

    @Enumerated(EnumType.STRING)
    @Column(name = "book_format", nullable = false, length = 20)
    private BookFormat bookFormat;

    @Enumerated(EnumType.STRING)
    @Column(name = "book_language", nullable = false, length = 3)
    private LanguageCode bookLanguage;

    @ManyToMany(fetch = FetchType.LAZY, mappedBy = "books")
    private Set<Author> authors = new HashSet<>(4);

    /**
     *
     */
    public BookPojo() {
    }

    /**
     *
     * @param id
     * @param itemCommonDetail
     * @param bookIsbn
     * @param uom
     * @param bookFormat
     * @param bookLanguage
     */
    public BookPojo(int id, ItemCommonDetailPojo itemCommonDetail, String bookIsbn, UOM uom, BookFormat bookFormat, LanguageCode bookLanguage) {
        this.id = id;
        this.itemCommonDetail = itemCommonDetail;
        this.bookIsbn = bookIsbn;
        this.uom = uom;
        this.bookFormat = bookFormat;
        this.bookLanguage = bookLanguage;
    }

    /**
     * Construct an object with all the fields initialised.
     *
     * @param id
     * @param itemCommonDetail
     * @param publisher
     * @param bookIsbn
     * @param bookPdfContent
     * @param bookEdition
     * @param publishDate
     * @param bookWidth
     * @param bookLength
     * @param bookThickness
     * @param uom
     * @param bookFormat
     * @param language
     * @param authors
     */
    public BookPojo(int id, ItemCommonDetailPojo itemCommonDetail, PublisherPojo publisher, String bookIsbn, byte[] bookPdfContent,
            Integer bookEdition, Date publishDate, BigDecimal bookWidth, BigDecimal bookLength,
            BigDecimal bookThickness, UOM uom, BookFormat bookFormat, LanguageCode language, Set<Author> authors) {
        this.id = id;
        this.itemCommonDetail = itemCommonDetail;
        this.publisher = publisher;
        this.bookIsbn = bookIsbn;
        this.bookPdfContent = bookPdfContent;
        this.bookEdition = bookEdition;
        this.publishDate = publishDate;
        this.bookWidth = bookWidth;
        this.bookLength = bookLength;
        this.bookThickness = bookThickness;
        this.uom = uom;
        this.bookFormat = bookFormat;
        this.bookLanguage = language;
        this.authors = authors;
    }

    @Override
    public int getId() {
        return this.id;
    }

    @Override
    public void setId(int id) {
        this.id = id;
    }

    @Override
    public ItemCommonDetailPojo getItemCommonDetail() {
        return itemCommonDetail;
    }

    @Override
    public void setItemCommonDetail(ItemCommonDetailPojo itemCommonDetail) {
        this.itemCommonDetail = itemCommonDetail;
    }

    @Override
    public PublisherPojo getPublisher() {
        return this.publisher;
    }

    @Override
    public void setPublisher(PublisherPojo publisher) {
        this.publisher = publisher;
    }

    @Override
    public String getIsbn() {
        return this.bookIsbn;
    }

    @Override
    public void setIsbn(String bookIsbn) {
        this.bookIsbn = bookIsbn;
    }

    @Override
    public byte[] getPdf() {
        return this.bookPdfContent;
    }

    @Override
    public void setPdf(byte[] bookPdfContent) {
        this.bookPdfContent = bookPdfContent;
    }

    @Override
    public int getEdition() {
        return this.bookEdition;
    }

    @Override
    public void setEdition(int bookEdition) {
        this.bookEdition = bookEdition;
    }

    @Override
    public Date getPublishDate() {
        return this.publishDate;
    }

    @Override
    public void setPublishDate(Date publishDate) {
        this.publishDate = publishDate;
    }

    @Override
    public BigDecimal getWidth() {
        return this.bookWidth;
    }

    @Override
    public void setWidth(BigDecimal bookWidth) {
        this.bookWidth = bookWidth;
    }

    @Override
    public BigDecimal getLength() {
        return this.bookLength;
    }

    @Override
    public void setLength(BigDecimal bookLength) {
        this.bookLength = bookLength;
    }

    @Override
    public BigDecimal getThickness() {
        return this.bookThickness;
    }

    @Override
    public void setThickness(BigDecimal bookThickness) {
        this.bookThickness = bookThickness;
    }

    @Override
    public UOM getUom() {
        return this.uom;
    }

    @Override
    public void setUom(UOM uom) {
        this.uom = uom;
    }

    @Override
    public BookFormat getFormat() {
        return this.bookFormat;
    }

    @Override
    public void setFormat(BookFormat bookFormat) {
        this.bookFormat = bookFormat;
    }

    @Override
    public LanguageCode getLanguage() {
        return this.bookLanguage;
    }

    @Override
    public void setLanguage(LanguageCode bookLanguage) {
        this.bookLanguage = bookLanguage;
    }

    public Set<Author> getAuthors() {
        return this.authors;
    }

    public void setAuthors(Set<Author> authors) {
        this.authors = authors;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 59 * hash + this.id;
        return hash;
    }

    @Override
    @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        //This code should be kept to show a method to compare the class. 
        //For Hibernate directly comparison of the class names is no good since 
        //its children should be considered as equals when their IDs are the same. 
        if (Hibernate.getClass(this) != Hibernate.getClass(obj)) {
            return false;
        }

        final BookPojo other = (BookPojo) obj;
        return this.id == other.id;
    }

    @Override
    public boolean hasSameConstraint(Book book) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean hasSameParameters(Book book) {
        return Objects.equals(bookIsbn, book.getIsbn());
    }
}
