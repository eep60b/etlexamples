/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.etlsolutions.examples.ha.pojo;
// Generated 10-Nov-2015 10:41:48 by Hibernate Tools 4.3.1

import com.etlsolutions.examples.data.api.Address;
import com.etlsolutions.examples.data.spi.AddressSpi;
import com.etlsolutions.examples.ha.control.QueryNames;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.validation.constraints.Min;
import org.hibernate.Hibernate;
import org.hibernate.annotations.NamedNativeQueries;
import org.hibernate.annotations.NamedNativeQuery;
import org.hibernate.annotations.NamedQueries;
import org.hibernate.annotations.NamedQuery;

/**
 * The AddressPojo class is generated automatically then modified manually.
 *
 * @author Zhipeng Chang
 *
 * @since 1.0.0
 *
 * @version 1.0.0 - generated by NetBeans.
 * @version 1.0.1 - Use generic type for sets.
 * @version 1.1.0 - Add the implementation of AddressSpi.
 * @version 1.2.0 - Override the equals(Object) and hashHode() methods.
 * @version 2.0.0 - Add the NamedQuery findAddress.
 * @version 2.1.0 - Add the NamedNativeQuery findAddressesNative.
 * @version 2.1.1 - Make queries read-only.
 * @version 2.2.0 - Add an non-set constructor.
 */
@Entity
@Table(name = "address", schema = "public")
@NamedQueries({
    @NamedQuery(name = QueryNames.findAddresses, query = "from AddressPojo", readOnly = true)
})
@NamedNativeQueries({
    @NamedNativeQuery(name = QueryNames.findAddressesNative, query = "select * from address", resultClass = AddressPojo.class, readOnly = true)
})
public class AddressPojo implements Serializable, AddressSpi {

    private static final long serialVersionUID = 186618536982220963L;
    
    @Id
    @Min(1)
    @Column(name = "address_id", unique = true, nullable = false)
    private int id;

    @Column(name = "house", nullable = false, length = 100)
    private String house;    
    
    @Column(name = "street", nullable = false, length = 400)
    private String street;
    
    @Column(name = "additional", length = 400)
    private String additional;
            
    @Column(name = "city", length = 100)
    private String city;
    
    @Column(name = "area", length = 100)
    private String area;
    
    @Column(name = "postcode", length = 100)
    private String postcode;
    
    @Column(name = "country", nullable = false, length = 200)
    private String country;
    
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "address")
    private Set<PublisherPojo> publishers = new HashSet<>(1);
    
   @OneToMany(fetch = FetchType.LAZY, mappedBy = "deliveryAddress")
    private Set<InvoicePojo> invoices = new HashSet<>(20);    
    
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "address")
    private Set<PersonAddressLinkPojo> personAddressLinks = new HashSet<>(3);

    /**
     * Construct a default object with no fields are initialised.
     */
    public AddressPojo() {
    }

    /**
     * Construct a object with the necessary fields which needed to populate the address table. 
     * @param id - The address ID.
     * @param house - The house name or house number.
     * @param street - The street name.
     * @param country  - The country code of this address.
     */
    public AddressPojo(int id, String house, String street, String country) {
        this.id = id;
        this.house = house;
        this.street = street;
        this.country = country;
    }

    /**
     * Construct an object which fields except sets are all initialised. The set fields are kept empty.
     * @param id - The address ID.
     * @param house - The house name or house number.
     * @param street - The street name.
     * @param additional - The additional information. 
     * @param city - The city of this address.
     * @param area - The area can be a province, a state or a county etc.
     * @param postcode - The postcode of this address.
     * @param country - The country code of this address.
     */
    public AddressPojo(int id, String house, String street, String additional, String city, String area, String postcode, String country) {
        this(id, house, street, country);
        this.additional = additional;
        this.city = city;
        this.area = area;
        this.postcode = postcode;
    }
    
    /**
     * Construct an object with all fields are initialised.
     * @param id - The address ID.
     * @param house - The house name or house number.
     * @param street - The street name.
     * @param additional - The additional information. 
     * @param city - The city of this address.
     * @param area - The area can be a province, a state or a county etc.
     * @param postcode - The postcode of this address.
     * @param country - The country code of this address.
     * @param publishers - The publishers which use this address.
     * @param invoices - The invoices which use this address.
     * @param personAddressLinks - The links to people who use this address. 
     */
    public AddressPojo(int id, String house, String street, String additional, String city,
            String area, String postcode, String country, Set<PublisherPojo> publishers, Set<InvoicePojo> invoices,
            Set<PersonAddressLinkPojo> personAddressLinks) {
        this(id, house, street, additional, city, area, postcode, country);
        this.publishers = publishers;
        this.invoices = invoices;
        this.personAddressLinks = personAddressLinks;
    }

    @Override
    public int getId() {
        return this.id;
    }

    @Override
    public void setId(int id) {
        this.id = id;
    }

    @Override
    public String getHouse() {
        return house;
    }

    @Override
    public void setHouse(String house) {
        this.house = house;
    }
    
    @Override
    public String getStreet() {
        return this.street;
    }

    @Override
    public void setStreet(String street) {
        this.street = street;
    }

    @Override
    public String getAdditional() {
        return this.additional;
    }

    @Override
    public void setAdditional(String additional) {
        this.additional = additional;
    }

    @Override
    public String getCity() {
        return this.city;
    }

    @Override
    public void setCity(String city) {
        this.city = city;
    }

    @Override
    public String getArea() {
        return this.area;
    }

    @Override
    public void setArea(String area) {
        this.area = area;
    }

    @Override
    public String getPostcode() {
        return this.postcode;
    }

    @Override
    public void setPostcode(String postcode) {
        this.postcode = postcode;
    }

    @Override
    public String getCountry() {
        return this.country;
    }

    @Override
    public void setCountry(String country) {
        this.country = country;
    }

    public Set<PublisherPojo> getPublishers() {
        return this.publishers;
    }

    public void setPublishers(Set<PublisherPojo> publishers) {
        this.publishers = publishers;
    }

    public Set<InvoicePojo> getInvoices() {
        return invoices;
    }

    public void setInvoices(Set<InvoicePojo> invoices) {
        this.invoices = invoices;
    }

    public Set<PersonAddressLinkPojo> getPersonAddressLinks() {
        return this.personAddressLinks;
    }

    public void setPersonAddressLinks(Set<PersonAddressLinkPojo> personAddressLinks) {
        this.personAddressLinks = personAddressLinks;
    }

    @Override
    public boolean hasSameConstraint(Address address) {
        if (address == null) {
            return false;
        }
        return Objects.equals(getStreet(), address.getStreet()) && Objects.equals(getAdditional(), address.getAdditional()) && Objects.equals(getArea(), address.getArea())
                && Objects.equals(getCity(), address.getCity()) && Objects.equals(getPostcode(), address.getPostcode()) && Objects.equals(getCountry(), address.getCountry());
    }    
    
    @Override
    public int hashCode() {
        int hash = 5;
        hash = 97 * hash + this.id;
        return hash;
    }

    @Override
    @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        //This code should be kept to show a method to compare the class. 
        //For Hibernate directly comparison of the class names is no good since 
        //its children should be considered as equals when their IDs are the same. 
        if (Hibernate.getClass(this) != Hibernate.getClass(obj)) {
            return false;
        }

        final AddressPojo other = (AddressPojo) obj;
        return this.id == other.id;
    }

    @Override
    public boolean hasSameParameters(Address constraintable) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
